 Whether you're looking to build a website, mobile app, desktop app, video game, or even something AI, at some point you have to choose what technologies you're using to build it. Picking what text act to use can seem impossible, especially when there's hundreds of tools available. You'll spend hours learning and coding language in a framework. And just as you feel ready, you get hit with the... How will you ever build your project when you have so many tools to learn? The truth is, you don't need these. You don't need tons of advanced tools to build your idea. This is called over-engineering. Start simple, and as you run into needs for more technologies, then you can learn them. Web, mobile, desktop, games, and AI are the five most common domains that developers want to build for. So in this video, we're going to go through them and I will give you a definitive answer of which starting technologies you should use for each. Starting with Web, every website needs HTML and CSS, and unless you're building a static blog, every web app also needs JavaScript, so we can start with those in our tech stack. Now, what programming language are you most fluent in? Whatever it is, there's a web framework that exists for it, so just use that. There's your web app tech stack. Moving on to phones, there are two mobile operating systems, iOS and Android. For these, you can either develop natively or cross-platform. Developing native means you use a different coding language for each, but you get better performance and more ways to interact with the device. If you want to develop native for iOS, use Swift. If you want to develop native for Android, use Kotlin. Developing cross-platform means you can use one code base for both devices. Use React Native if you like JavaScript and Flutter if you want to try something else. Boom! There's your mobile app tech stack. Similarly to mobile, your desktop app tech stack depends on the operating system you choose to build for. Mac OS, Windows, Linux, or natively for all of them. For all of our mobile, developing native means you use a different coding language for each, but you get better performance and more ways to interact with the device. For native Mac OS development, use Swift. For native Windows development, use C-sharp. And for native Linux development, use C++. You can also develop cross-platform using Java, using either Java FX or Swing as a GUI toolkit. Boom! There's your desktop app tech stack. The video game tech stack is the most straightforward. You will use one of two video game engines. If you need high-end graphics and high-performance, choose the game engine Unreal Engine, which uses C++. If you don't need that and want simplicity, choose Unity, which uses C-sharp. Boom! There's your video game tech stack. Right now, AI and machine learning are all a rage, so I'm sure that many of you will want to build AI-slash ML projects. If you're just looking to make a basic chat GPT wrapper, then you're actually looking at the wrong section. Chat GPT wrappers are just web apps that consume open AI's API. Now, if you're doing the actual machine learning stuff yourself, there are two main languages you use. Python and R. R is usually used for statistical analysis and data visualization, while Python is used for running machine learning tasks. In particular, every AI-ML project will use the Python libraries numpy and pandas. If you need traditional machine learning algorithms, you can use scikit-learn. And if you need a deep learning framework, you can pick either PyTorch or TensorFlow. Honestly, AI-ML is a very extensive topic of its own, which is why soon I have a video coming out to explore AI concepts deeper. Subscribe to see that, but for now, boom, there's your AI-ML tech stack. Thanks so much for watching. If you liked this video, make sure you subscribe and hit that notification bell for future uploads. Also, I recently created Discord server where you can ask for advice, get resume reviews, chat with others, and even leave video suggestions. The link for that is in the description. Thanks, and I'll see you all in the next video.