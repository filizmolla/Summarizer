WEBVTT
Kind: captions
Language: tr

00:00:00.199 --> 00:00:01.790 align:start position:0%
 
burada <00:00:00.339><c>baktığınız </c><00:00:00.479><c>şey, </c><00:00:00.619><c>go </c><00:00:00.759><c>programlama </c><00:00:00.899><c>dilini </c><00:00:01.039><c>programlayan </c><00:00:01.179><c>efsanevi </c><00:00:01.319><c>programcı </c><00:00:01.459><c>Rob </c><00:00:01.599><c>Pike</c>

00:00:01.790 --> 00:00:01.800 align:start position:0%
burada baktığınız şey, go programlama dilini programlayan efsanevi programcı Rob Pike
 

00:00:01.800 --> 00:00:03.510 align:start position:0%
burada baktığınız şey, go programlama dilini programlayan efsanevi programcı Rob Pike
tarafından <00:00:02.199><c>yazılan </c><00:00:02.598><c>programlamanın </c><00:00:02.997><c>beş </c><00:00:03.396><c>kuralıdır</c>

00:00:03.510 --> 00:00:05.390 align:start position:0%
tarafından yazılan programlamanın beş kuralıdır
 

00:00:05.390 --> 00:00:07.190 align:start position:0%
 
 

00:00:07.190 --> 00:00:07.200 align:start position:0%
 
 

00:00:07.200 --> 00:00:08.950 align:start position:0%
 
programlamanın <00:00:07.980><c>ilk </c><00:00:08.760><c>kuralı</c>

00:00:08.950 --> 00:00:08.960 align:start position:0%
programlamanın ilk kuralı
 

00:00:08.960 --> 00:00:10.709 align:start position:0%
programlamanın ilk kuralı
programlama <00:00:09.271><c>hakkında </c><00:00:09.582><c>konuşmamaktır </c><00:00:09.893><c>programlamanın </c><00:00:10.204><c>ikinci </c><00:00:10.515><c>kuralı</c>

00:00:10.709 --> 00:00:10.719 align:start position:0%
programlama hakkında konuşmamaktır programlamanın ikinci kuralı
 

00:00:10.719 --> 00:00:12.749 align:start position:0%
programlama hakkında konuşmamaktır programlamanın ikinci kuralı
ölçmektir <00:00:11.619><c>ayarlama </c><00:00:12.519><c>yapma</c>

00:00:12.749 --> 00:00:12.759 align:start position:0%
ölçmektir ayarlama yapma
 

00:00:12.759 --> 00:00:14.910 align:start position:0%
ölçmektir ayarlama yapma
Ölçülene <00:00:13.229><c>kadar </c><00:00:13.699><c>hız </c><00:00:14.169><c>yapın </c><00:00:14.639><c>ve</c>

00:00:14.910 --> 00:00:14.920 align:start position:0%
Ölçülene kadar hız yapın ve
 

00:00:14.920 --> 00:00:16.830 align:start position:0%
Ölçülene kadar hız yapın ve
kodun <00:00:15.740><c>bir </c><00:00:16.560><c>kısmı</c>

00:00:16.830 --> 00:00:16.840 align:start position:0%
kodun bir kısmı
 

00:00:16.840 --> 00:00:19.029 align:start position:0%
kodun bir kısmı
geri <00:00:17.028><c>kalanına </c><00:00:17.216><c>üstün </c><00:00:17.404><c>gelmediği </c><00:00:17.592><c>sürece </c><00:00:17.780><c>ölçüm </c><00:00:17.968><c>yapmayın, </c><00:00:18.156><c>bu </c><00:00:18.344><c>yine </c><00:00:18.532><c>bir </c><00:00:18.720><c>başka</c>

00:00:19.029 --> 00:00:19.039 align:start position:0%
geri kalanına üstün gelmediği sürece ölçüm yapmayın, bu yine bir başka
 

00:00:19.039 --> 00:00:21.109 align:start position:0%
geri kalanına üstün gelmediği sürece ölçüm yapmayın, bu yine bir başka
efsanevi <00:00:19.679><c>programcı </c><00:00:20.319><c>Donald </c><00:00:20.959><c>Canth'ın</c>

00:00:21.109 --> 00:00:22.790 align:start position:0%
efsanevi programcı Donald Canth'ın
 

00:00:22.790 --> 00:00:22.800 align:start position:0%
 
 

00:00:22.800 --> 00:00:24.870 align:start position:0%
 
zamanından <00:00:23.760><c>önce </c><00:00:24.720><c>optimizasyonun</c>

00:00:24.870 --> 00:00:24.880 align:start position:0%
zamanından önce optimizasyonun
 

00:00:24.880 --> 00:00:26.550 align:start position:0%
zamanından önce optimizasyonun
tüm <00:00:24.996><c>kötülüklerin </c><00:00:25.112><c>kökü </c><00:00:25.228><c>olduğunu </c><00:00:25.344><c>söylerken </c><00:00:25.460><c>benzer </c><00:00:25.576><c>tavsiyelerde </c><00:00:25.692><c>bulunduğunu </c><00:00:25.808><c>hatırlatıyor, </c><00:00:25.924><c>hatta </c><00:00:26.040><c>babam </c><00:00:26.156><c>bile </c><00:00:26.272><c>bana</c>

00:00:26.550 --> 00:00:26.560 align:start position:0%
tüm kötülüklerin kökü olduğunu söylerken benzer tavsiyelerde bulunduğunu hatırlatıyor, hatta babam bile bana
 

00:00:26.560 --> 00:00:28.910 align:start position:0%
tüm kötülüklerin kökü olduğunu söylerken benzer tavsiyelerde bulunduğunu hatırlatıyor, hatta babam bile bana
ölçmemi <00:00:26.912><c>söylerdi  </c><00:00:27.264><c>programlamada </c><00:00:27.616><c>iki </c><00:00:27.968><c>kere </c><00:00:28.320><c>kesme</c>

00:00:28.910 --> 00:00:30.470 align:start position:0%
ölçmemi söylerdi  programlamada iki kere kesme
 

00:00:30.470 --> 00:00:30.480 align:start position:0%
 
 

00:00:30.480 --> 00:00:32.350 align:start position:0%
 
bir <00:00:30.620><c>kedinin </c><00:00:30.760><c>derisini </c><00:00:30.900><c>yüzmenin </c><00:00:31.040><c>neredeyse </c><00:00:31.180><c>Sınırsız </c><00:00:31.320><c>sayıda </c><00:00:31.460><c>yolu </c><00:00:31.600><c>vardır </c><00:00:31.740><c>ancak </c><00:00:31.880><c>kodunuzu </c><00:00:32.020><c>yazma </c><00:00:32.160><c>şekliniz</c>

00:00:32.350 --> 00:00:32.360 align:start position:0%
bir kedinin derisini yüzmenin neredeyse Sınırsız sayıda yolu vardır ancak kodunuzu yazma şekliniz
 

00:00:32.360 --> 00:00:34.590 align:start position:0%
bir kedinin derisini yüzmenin neredeyse Sınırsız sayıda yolu vardır ancak kodunuzu yazma şekliniz
önemlidir, <00:00:32.860><c>tıpkı </c><00:00:33.360><c>JavaScript'te </c><00:00:33.860><c>göreceğimiz </c><00:00:34.360><c>gibi,</c>

00:00:34.590 --> 00:00:36.069 align:start position:0%
önemlidir, tıpkı JavaScript'te göreceğimiz gibi,
 

00:00:36.069 --> 00:00:36.079 align:start position:0%
 
 

00:00:36.079 --> 00:00:37.750 align:start position:0%
 
bir <00:00:36.469><c>dizi </c><00:00:36.859><c>üzerinde </c><00:00:37.249><c>döngü </c><00:00:37.639><c>yapıp</c>

00:00:37.750 --> 00:00:37.760 align:start position:0%
bir dizi üzerinde döngü yapıp
 

00:00:37.760 --> 00:00:39.790 align:start position:0%
bir dizi üzerinde döngü yapıp
değerlerini <00:00:37.968><c>saymanın </c><00:00:38.176><c>en </c><00:00:38.384><c>az </c><00:00:38.592><c>dört </c><00:00:38.800><c>farklı </c><00:00:39.008><c>yolu </c><00:00:39.216><c>vardır </c><00:00:39.424><c>ancak  </c><00:00:39.632><c>bugünkü</c>

00:00:39.790 --> 00:00:39.800 align:start position:0%
değerlerini saymanın en az dört farklı yolu vardır ancak  bugünkü
 

00:00:39.800 --> 00:00:41.630 align:start position:0%
değerlerini saymanın en az dört farklı yolu vardır ancak  bugünkü
videoda <00:00:40.051><c>her </c><00:00:40.302><c>tekniğin </c><00:00:40.553><c>performansı </c><00:00:40.804><c>önemli </c><00:00:41.055><c>ölçüde </c><00:00:41.306><c>farklılık </c><00:00:41.557><c>gösteriyor</c>

00:00:41.630 --> 00:00:41.640 align:start position:0%
videoda her tekniğin performansı önemli ölçüde farklılık gösteriyor
 

00:00:41.640 --> 00:00:43.229 align:start position:0%
videoda her tekniğin performansı önemli ölçüde farklılık gösteriyor
Size

00:00:43.229 --> 00:00:43.239 align:start position:0%
Size
 

00:00:43.239 --> 00:00:45.389 align:start position:0%
Size
JavaScript <00:00:43.572><c>kodunuzu </c><00:00:43.905><c>nasıl </c><00:00:44.238><c>kolayca </c><00:00:44.571><c>kıyaslayacağınızı </c><00:00:44.904><c>göstereceğim, </c><00:00:45.237><c>böylece</c>

00:00:45.389 --> 00:00:45.399 align:start position:0%
JavaScript kodunuzu nasıl kolayca kıyaslayacağınızı göstereceğim, böylece
 

00:00:45.399 --> 00:00:46.869 align:start position:0%
JavaScript kodunuzu nasıl kolayca kıyaslayacağınızı göstereceğim, böylece
performansını <00:00:45.812><c>bilimsel </c><00:00:46.225><c>olarak </c><00:00:46.638><c>ölçebilir</c>

00:00:46.869 --> 00:00:46.879 align:start position:0%
performansını bilimsel olarak ölçebilir
 

00:00:46.879 --> 00:00:48.790 align:start position:0%
performansını bilimsel olarak ölçebilir
ve <00:00:47.199><c>kıyaslamayı </c><00:00:47.519><c>son </c><00:00:47.839><c>derece </c><00:00:48.159><c>kolay </c><00:00:48.479><c>hale</c>

00:00:48.790 --> 00:00:48.800 align:start position:0%
ve kıyaslamayı son derece kolay hale
 

00:00:48.800 --> 00:00:50.910 align:start position:0%
ve kıyaslamayı son derece kolay hale
getirmemize <00:00:48.978><c>yardımcı </c><00:00:49.156><c>olmak </c><00:00:49.334><c>için </c><00:00:49.512><c>kırmızı </c><00:00:49.690><c>ringa </c><00:00:49.868><c>balığı </c><00:00:50.046><c>optimize </c><00:00:50.224><c>ederek </c><00:00:50.402><c>zaman </c><00:00:50.580><c>kaybetmekten </c><00:00:50.758><c>kaçınabilirsiniz.</c>

00:00:50.910 --> 00:00:52.750 align:start position:0%
getirmemize yardımcı olmak için kırmızı ringa balığı optimize ederek zaman kaybetmekten kaçınabilirsiniz.
 

00:00:52.750 --> 00:00:52.760 align:start position:0%
 
 

00:00:52.760 --> 00:00:55.029 align:start position:0%
 
JavaScript <00:00:54.879><c>kullanacağız</c>

00:00:55.029 --> 00:00:55.039 align:start position:0%
JavaScript kullanacağız
 

00:00:55.039 --> 00:00:57.069 align:start position:0%
JavaScript kullanacağız
Yerleşik <00:00:55.301><c>bir </c><00:00:55.563><c>kıyaslama </c><00:00:55.825><c>aracına </c><00:00:56.087><c>sahip </c><00:00:56.349><c>olan </c><00:00:56.611><c>runtime </c><00:00:56.873><c>Dino</c>

00:00:57.069 --> 00:00:57.079 align:start position:0%
Yerleşik bir kıyaslama aracına sahip olan runtime Dino
 

00:00:57.079 --> 00:00:58.670 align:start position:0%
Yerleşik bir kıyaslama aracına sahip olan runtime Dino
ile <00:00:57.459><c>birkaç </c><00:00:57.839><c>gün </c><00:00:58.219><c>uğraştıktan </c><00:00:58.599><c>sonra</c>

00:00:58.670 --> 00:00:58.680 align:start position:0%
ile birkaç gün uğraştıktan sonra
 

00:00:58.680 --> 00:01:00.750 align:start position:0%
ile birkaç gün uğraştıktan sonra
bazı <00:00:58.983><c>şaşırtıcı </c><00:00:59.286><c>şeyler </c><00:00:59.589><c>elde </c><00:00:59.892><c>etmeyi </c><00:01:00.195><c>başardım,</c>

00:01:00.750 --> 00:01:00.760 align:start position:0%
bazı şaşırtıcı şeyler elde etmeyi başardım,
 

00:01:00.760 --> 00:01:02.189 align:start position:0%
bazı şaşırtıcı şeyler elde etmeyi başardım,
örneğin <00:01:01.879><c>dizi</c>

00:01:02.189 --> 00:01:02.199 align:start position:0%
örneğin dizi
 

00:01:02.199 --> 00:01:04.549 align:start position:0%
örneğin dizi
içeriklerini <00:01:02.513><c>100.000 </c><00:01:02.827><c>kat </c><00:01:03.141><c>daha </c><00:01:03.455><c>hızlı </c><00:01:03.769><c>hale </c><00:01:04.083><c>getirmeyi </c><00:01:04.397><c>buldum.</c>

00:01:04.549 --> 00:01:06.070 align:start position:0%
içeriklerini 100.000 kat daha hızlı hale getirmeyi buldum.
 

00:01:06.070 --> 00:01:07.789 align:start position:0%
 
 

00:01:07.789 --> 00:01:07.799 align:start position:0%
 
 

00:01:07.799 --> 00:01:09.469 align:start position:0%
 
JavaScript'te <00:01:08.095><c>yerleşik </c><00:01:08.391><c>dizi </c><00:01:08.687><c>sıralama </c><00:01:08.983><c>yöntemi </c><00:01:09.279><c>ve</c>

00:01:09.469 --> 00:01:09.479 align:start position:0%
JavaScript'te yerleşik dizi sıralama yöntemi ve
 

00:01:09.479 --> 00:01:11.230 align:start position:0%
JavaScript'te yerleşik dizi sıralama yöntemi ve
döngü <00:01:09.739><c>yazmanın </c><00:01:09.999><c>en </c><00:01:10.259><c>hızlı </c><00:01:10.519><c>yolunu </c><00:01:10.779><c>buldum, </c><00:01:11.039><c>önce</c>

00:01:11.230 --> 00:01:11.240 align:start position:0%
döngü yazmanın en hızlı yolunu buldum, önce
 

00:01:11.240 --> 00:01:13.390 align:start position:0%
döngü yazmanın en hızlı yolunu buldum, önce
Doo <00:01:11.573><c>bench'in </c><00:01:11.906><c>nasıl </c><00:01:12.239><c>çalıştığına </c><00:01:12.572><c>bir </c><00:01:12.905><c>göz </c><00:01:13.238><c>atalım,</c>

00:01:13.390 --> 00:01:13.400 align:start position:0%
Doo bench'in nasıl çalıştığına bir göz atalım,
 

00:01:13.400 --> 00:01:14.550 align:start position:0%
Doo bench'in nasıl çalıştığına bir göz atalım,
ilk <00:01:13.525><c>önce </c><00:01:13.650><c>Doo </c><00:01:13.775><c>2'nin </c><00:01:13.900><c>kurulu </c><00:01:14.025><c>olduğundan </c><00:01:14.150><c>emin </c><00:01:14.275><c>olmak </c><00:01:14.400><c>isteyeceksiniz</c>

00:01:14.550 --> 00:01:14.560 align:start position:0%
ilk önce Doo 2'nin kurulu olduğundan emin olmak isteyeceksiniz
 

00:01:14.560 --> 00:01:16.830 align:start position:0%
ilk önce Doo 2'nin kurulu olduğundan emin olmak isteyeceksiniz
ve <00:01:14.976><c>ayrıca </c><00:01:15.392><c>şunu </c><00:01:15.808><c>da </c><00:01:16.224><c>belirtmek </c><00:01:16.640><c>isterim</c>

00:01:16.830 --> 00:01:16.840 align:start position:0%
ve ayrıca şunu da belirtmek isterim
 

00:01:16.840 --> 00:01:18.350 align:start position:0%
ve ayrıca şunu da belirtmek isterim
ki  <00:01:17.479><c>Bu </c><00:01:18.118><c>video,</c>

00:01:18.350 --> 00:01:18.360 align:start position:0%
ki  Bu video,
 

00:01:18.360 --> 00:01:20.469 align:start position:0%
ki  Bu video,
şu <00:01:18.673><c>anda </c><00:01:18.986><c>resmi </c><00:01:19.299><c>olarak </c><00:01:19.612><c>üretim </c><00:01:19.925><c>aşamasında </c><00:01:20.238><c>olan</c>

00:01:20.469 --> 00:01:20.479 align:start position:0%
şu anda resmi olarak üretim aşamasında olan
 

00:01:20.479 --> 00:01:21.950 align:start position:0%
şu anda resmi olarak üretim aşamasında olan
ve <00:01:20.719><c>7 </c><00:01:20.959><c>Kasım </c><00:01:21.199><c>civarında </c><00:01:21.439><c>çıkması </c><00:01:21.679><c>beklenen,</c>

00:01:21.950 --> 00:01:21.960 align:start position:0%
ve 7 Kasım civarında çıkması beklenen,
 

00:01:21.960 --> 00:01:24.069 align:start position:0%
ve 7 Kasım civarında çıkması beklenen,
yaklaşık <00:01:23.600><c>25</c>

00:01:24.069 --> 00:01:24.079 align:start position:0%
yaklaşık 25
 

00:01:24.079 --> 00:01:26.109 align:start position:0%
yaklaşık 25
video <00:01:24.250><c>ve </c><00:01:24.421><c>birden </c><00:01:24.592><c>fazla </c><00:01:24.763><c>projeyi </c><00:01:24.934><c>içerecek </c><00:01:25.105><c>olan </c><00:01:25.276><c>tam </c><00:01:25.447><c>Dino </c><00:01:25.618><c>kursumun </c><00:01:25.789><c>bir </c><00:01:25.960><c>parçasıdır;</c>

00:01:26.109 --> 00:01:26.119 align:start position:0%
video ve birden fazla projeyi içerecek olan tam Dino kursumun bir parçasıdır;
 

00:01:26.119 --> 00:01:27.350 align:start position:0%
video ve birden fazla projeyi içerecek olan tam Dino kursumun bir parçasıdır;
belirtmek <00:01:26.399><c>istediğim </c><00:01:26.679><c>diğer </c><00:01:26.959><c>şey, </c><00:01:27.239><c>yalnızca</c>

00:01:27.350 --> 00:01:27.360 align:start position:0%
belirtmek istediğim diğer şey, yalnızca
 

00:01:27.360 --> 00:01:29.149 align:start position:0%
belirtmek istediğim diğer şey, yalnızca
JavaScript'i <00:01:27.690><c>ve </c><00:01:28.020><c>performansını </c><00:01:28.350><c>ölçüyor </c><00:01:28.680><c>olmamızdır.</c>

00:01:29.149 --> 00:01:29.159 align:start position:0%
JavaScript'i ve performansını ölçüyor olmamızdır.
 

00:01:29.159 --> 00:01:31.149 align:start position:0%
JavaScript'i ve performansını ölçüyor olmamızdır.
kaputun <00:01:31.000><c>altındaki</c>

00:01:31.149 --> 00:01:33.149 align:start position:0%
kaputun altındaki
 

00:01:33.149 --> 00:01:33.159 align:start position:0%
 
 

00:01:33.159 --> 00:01:35.069 align:start position:0%
 
tüm <00:01:33.294><c>krom </c><00:01:33.429><c>tarayıcılara </c><00:01:33.564><c>da </c><00:01:33.699><c>güç </c><00:01:33.834><c>veren </c><00:01:33.969><c>V8 </c><00:01:34.104><c>motor </c><00:01:34.239><c>tarafından </c><00:01:34.374><c>çalıştırılan </c><00:01:34.509><c>doo </c><00:01:34.644><c>çalışma </c><00:01:34.779><c>zamanında </c><00:01:34.914><c>ve</c>

00:01:35.069 --> 00:01:35.079 align:start position:0%
tüm krom tarayıcılara da güç veren V8 motor tarafından çalıştırılan doo çalışma zamanında ve
 

00:01:35.079 --> 00:01:37.109 align:start position:0%
tüm krom tarayıcılara da güç veren V8 motor tarafından çalıştırılan doo çalışma zamanında ve
hayır.  <00:01:36.880><c>Ancak,</c>

00:01:37.109 --> 00:01:38.630 align:start position:0%
hayır.  Ancak,
 

00:01:38.630 --> 00:01:38.640 align:start position:0%
 
 

00:01:38.640 --> 00:01:41.109 align:start position:0%
 
Dino <00:01:38.850><c>ve </c><00:01:39.060><c>Bun </c><00:01:39.270><c>düğümü </c><00:01:39.480><c>gibi </c><00:01:39.690><c>farklı </c><00:01:39.900><c>çalışma </c><00:01:40.110><c>süreleri </c><00:01:40.320><c>arasındaki </c><00:01:40.530><c>performansı </c><00:01:40.740><c>karşılaştırmak </c><00:01:40.950><c>istiyorsanız,</c>

00:01:41.109 --> 00:01:41.119 align:start position:0%
Dino ve Bun düğümü gibi farklı çalışma süreleri arasındaki performansı karşılaştırmak istiyorsanız,
 

00:01:41.119 --> 00:01:42.990 align:start position:0%
Dino ve Bun düğümü gibi farklı çalışma süreleri arasındaki performansı karşılaştırmak istiyorsanız,
Anton

00:01:42.990 --> 00:01:43.000 align:start position:0%
Anton
 

00:01:43.000 --> 00:01:44.749 align:start position:0%
Anton
Putra'nın <00:01:43.820><c>üçünü </c><00:01:44.640><c>de</c>

00:01:44.749 --> 00:01:44.759 align:start position:0%
Putra'nın üçünü de
 

00:01:44.759 --> 00:01:46.230 align:start position:0%
Putra'nın üçünü de
büyük <00:01:44.864><c>ölçekli </c><00:01:44.969><c>bir </c><00:01:45.074><c>Bulut </c><00:01:45.179><c>ortamında </c><00:01:45.284><c>test </c><00:01:45.389><c>eden </c><00:01:45.494><c>bu </c><00:01:45.599><c>videosunu </c><00:01:45.704><c>şiddetle </c><00:01:45.809><c>tavsiye </c><00:01:45.914><c>ederim.</c>

00:01:46.230 --> 00:01:47.910 align:start position:0%
büyük ölçekli bir Bulut ortamında test eden bu videosunu şiddetle tavsiye ederim.
 

00:01:47.910 --> 00:01:49.830 align:start position:0%
 
 

00:01:49.830 --> 00:01:49.840 align:start position:0%
 
 

00:01:49.840 --> 00:01:51.670 align:start position:0%
 
JavaScript'te <00:01:49.952><c>bir </c><00:01:50.064><c>dizi </c><00:01:50.176><c>üzerinde </c><00:01:50.288><c>Döngü </c><00:01:50.400><c>yapmanın </c><00:01:50.512><c>en </c><00:01:50.624><c>hızlı </c><00:01:50.736><c>yolu </c><00:01:50.848><c>nedir </c><00:01:50.960><c>sorusuna </c><00:01:51.072><c>kod </c><00:01:51.184><c>yazın </c><00:01:51.296><c>ve </c><00:01:51.408><c>cevap </c><00:01:51.520><c>verin</c>

00:01:51.670 --> 00:01:53.550 align:start position:0%
JavaScript'te bir dizi üzerinde Döngü yapmanın en hızlı yolu nedir sorusuna kod yazın ve cevap verin
 

00:01:53.550 --> 00:01:53.560 align:start position:0%
 
 

00:01:53.560 --> 00:01:55.109 align:start position:0%
 
Bunu <00:01:53.735><c>yapmanın </c><00:01:53.910><c>en </c><00:01:54.085><c>az </c><00:01:54.260><c>dört </c><00:01:54.435><c>farklı </c><00:01:54.610><c>yolunu </c><00:01:54.785><c>biliyorum, </c><00:01:54.960><c>bunları</c>

00:01:55.109 --> 00:01:55.119 align:start position:0%
Bunu yapmanın en az dört farklı yolunu biliyorum, bunları
 

00:01:55.119 --> 00:01:57.109 align:start position:0%
Bunu yapmanın en az dört farklı yolunu biliyorum, bunları
bu <00:01:55.429><c>dört </c><00:01:55.739><c>fonksiyonda </c><00:01:56.049><c>temsil </c><00:01:56.359><c>ettim;</c>

00:01:57.109 --> 00:01:57.119 align:start position:0%
bu dört fonksiyonda temsil ettim;
 

00:01:57.119 --> 00:01:59.149 align:start position:0%
bu dört fonksiyonda temsil ettim;
burada <00:01:57.365><c>amaç </c><00:01:57.611><c>bir </c><00:01:57.857><c>dizi </c><00:01:58.103><c>üzerinde </c><00:01:58.349><c>Döngü </c><00:01:58.595><c>yapmak</c>

00:01:59.149 --> 00:01:59.159 align:start position:0%
burada amaç bir dizi üzerinde Döngü yapmak
 

00:01:59.159 --> 00:02:00.590 align:start position:0%
burada amaç bir dizi üzerinde Döngü yapmak
ve <00:01:59.301><c>sonra </c><00:01:59.443><c>toplamaktır  </c><00:01:59.585><c>ilk </c><00:01:59.727><c>önce </c><00:01:59.869><c>bu </c><00:02:00.011><c>dizideki </c><00:02:00.153><c>sayıları </c><00:02:00.295><c>yukarı </c><00:02:00.437><c>çıkaralım,</c>

00:02:00.590 --> 00:02:02.910 align:start position:0%
ve sonra toplamaktır  ilk önce bu dizideki sayıları yukarı çıkaralım,
 

00:02:02.910 --> 00:02:02.920 align:start position:0%
 
 

00:02:02.920 --> 00:02:04.789 align:start position:0%
 
her <00:02:03.102><c>yöntem </c><00:02:03.284><c>için </c><00:02:03.466><c>bir </c><00:02:03.648><c>dizimiz </c><00:02:03.830><c>var, </c><00:02:04.012><c>eğer </c><00:02:04.194><c>bir </c><00:02:04.376><c>diziniz </c><00:02:04.558><c>varsa,</c>

00:02:04.789 --> 00:02:04.799 align:start position:0%
her yöntem için bir dizimiz var, eğer bir diziniz varsa,
 

00:02:04.799 --> 00:02:06.870 align:start position:0%
her yöntem için bir dizimiz var, eğer bir diziniz varsa,
her <00:02:05.079><c>biri </c><00:02:05.359><c>için </c><00:02:05.639><c>bir </c><00:02:05.919><c>seçenek </c><00:02:06.199><c>kullanmaktır, </c><00:02:06.479><c>ona </c><00:02:06.759><c>çalışan</c>

00:02:06.870 --> 00:02:06.880 align:start position:0%
her biri için bir seçenek kullanmaktır, ona çalışan
 

00:02:06.880 --> 00:02:08.949 align:start position:0%
her biri için bir seçenek kullanmaktır, ona çalışan
bir <00:02:07.148><c>değişkeni </c><00:02:07.416><c>değiştiren </c><00:02:07.684><c>bir </c><00:02:07.952><c>geri </c><00:02:08.220><c>çağırma </c><00:02:08.488><c>işlevi </c><00:02:08.756><c>sağlayın,</c>

00:02:08.949 --> 00:02:08.959 align:start position:0%
bir değişkeni değiştiren bir geri çağırma işlevi sağlayın,
 

00:02:08.959 --> 00:02:10.630 align:start position:0%
bir değişkeni değiştiren bir geri çağırma işlevi sağlayın,
ancak

00:02:10.630 --> 00:02:10.640 align:start position:0%
ancak
 

00:02:10.640 --> 00:02:13.030 align:start position:0%
ancak
bunu <00:02:10.880><c>yapmanın </c><00:02:11.120><c>daha </c><00:02:11.360><c>temiz </c><00:02:11.600><c>bir </c><00:02:11.840><c>yolu </c><00:02:12.080><c>var</c>

00:02:13.030 --> 00:02:13.040 align:start position:0%
bunu yapmanın daha temiz bir yolu var
 

00:02:13.040 --> 00:02:15.110 align:start position:0%
bunu yapmanın daha temiz bir yolu var
aynı <00:02:13.308><c>zamanda </c><00:02:13.576><c>bir </c><00:02:13.844><c>geri </c><00:02:14.112><c>çağırma </c><00:02:14.380><c>işlevi </c><00:02:14.648><c>alan </c><00:02:14.916><c>ancak</c>

00:02:15.110 --> 00:02:15.120 align:start position:0%
aynı zamanda bir geri çağırma işlevi alan ancak
 

00:02:15.120 --> 00:02:17.110 align:start position:0%
aynı zamanda bir geri çağırma işlevi alan ancak
aynı <00:02:15.328><c>zamanda </c><00:02:15.536><c>birikmiş </c><00:02:15.744><c>bir </c><00:02:15.952><c>değere </c><00:02:16.160><c>sahip </c><00:02:16.368><c>olan </c><00:02:16.576><c>dizi </c><00:02:16.784><c>azaltma </c><00:02:16.992><c>ile</c>

00:02:17.110 --> 00:02:17.120 align:start position:0%
aynı zamanda birikmiş bir değere sahip olan dizi azaltma ile
 

00:02:17.120 --> 00:02:19.190 align:start position:0%
aynı zamanda birikmiş bir değere sahip olan dizi azaltma ile
bu <00:02:17.469><c>değişkeni </c><00:02:17.818><c>değiştirmeye </c><00:02:18.167><c>gerek </c><00:02:18.516><c>yoktur,</c>

00:02:19.190 --> 00:02:20.790 align:start position:0%
bu değişkeni değiştirmeye gerek yoktur,
 

00:02:20.790 --> 00:02:20.800 align:start position:0%
 
 

00:02:20.800 --> 00:02:22.509 align:start position:0%
 
bunun <00:02:20.912><c>gibi </c><00:02:21.024><c>işlevsel </c><00:02:21.136><c>bildirimsel </c><00:02:21.248><c>kodu </c><00:02:21.360><c>reactjs </c><00:02:21.472><c>gibi </c><00:02:21.584><c>ön </c><00:02:21.696><c>uç </c><00:02:21.808><c>projelerde </c><00:02:21.920><c>çok </c><00:02:22.032><c>göreceksiniz,</c>

00:02:22.509 --> 00:02:22.519 align:start position:0%
bunun gibi işlevsel bildirimsel kodu reactjs gibi ön uç projelerde çok göreceksiniz,
 

00:02:22.519 --> 00:02:25.190 align:start position:0%
bunun gibi işlevsel bildirimsel kodu reactjs gibi ön uç projelerde çok göreceksiniz,
ancak <00:02:23.372><c>bir </c><00:02:24.225><c>sonraki </c><00:02:25.078><c>seçenek</c>

00:02:25.190 --> 00:02:25.200 align:start position:0%
ancak bir sonraki seçenek
 

00:02:25.200 --> 00:02:27.270 align:start position:0%
ancak bir sonraki seçenek
artırmaktır.  <00:02:25.451><c>JavaScript'te </c><00:02:25.702><c>normal </c><00:02:25.953><c>bir </c><00:02:26.204><c>dört </c><00:02:26.455><c>Döngü </c><00:02:26.706><c>kullanarak </c><00:02:26.957><c>toplam,</c>

00:02:27.270 --> 00:02:29.229 align:start position:0%
artırmaktır.  JavaScript'te normal bir dört Döngü kullanarak toplam,
 

00:02:29.229 --> 00:02:31.110 align:start position:0%
 
 

00:02:31.110 --> 00:02:31.120 align:start position:0%
 
 

00:02:31.120 --> 00:02:32.830 align:start position:0%
 
dizinin <00:02:31.272><c>sonuna </c><00:02:31.424><c>kadar </c><00:02:31.576><c>otomatik </c><00:02:31.728><c>olarak </c><00:02:31.880><c>yinelenecek </c><00:02:32.032><c>bir </c><00:02:32.184><c>dörtlü </c><00:02:32.336><c>Döngü </c><00:02:32.488><c>oluşturabilirsiniz, </c><00:02:32.640><c>bu</c>

00:02:32.830 --> 00:02:32.840 align:start position:0%
dizinin sonuna kadar otomatik olarak yinelenecek bir dörtlü Döngü oluşturabilirsiniz, bu
 

00:02:32.840 --> 00:02:34.390 align:start position:0%
dizinin sonuna kadar otomatik olarak yinelenecek bir dörtlü Döngü oluşturabilirsiniz, bu
güzel <00:02:33.213><c>ve </c><00:02:33.586><c>okunabilirdir </c><00:02:33.959><c>ancak</c>

00:02:34.390 --> 00:02:34.400 align:start position:0%
güzel ve okunabilirdir ancak
 

00:02:34.400 --> 00:02:36.110 align:start position:0%
güzel ve okunabilirdir ancak
for <00:02:34.800><c>Döngüsü </c><00:02:35.200><c>yazmanın </c><00:02:35.600><c>geleneksel </c><00:02:36.000><c>yolu,</c>

00:02:36.110 --> 00:02:36.120 align:start position:0%
for Döngüsü yazmanın geleneksel yolu,
 

00:02:36.120 --> 00:02:37.990 align:start position:0%
for Döngüsü yazmanın geleneksel yolu,
bir <00:02:36.360><c>değişkenin </c><00:02:36.600><c>olduğu </c><00:02:36.840><c>bu </c><00:02:37.080><c>daha </c><00:02:37.320><c>açık </c><00:02:37.560><c>sözdizimini </c><00:02:37.800><c>kullanmaktır</c>

00:02:37.990 --> 00:02:40.390 align:start position:0%
bir değişkenin olduğu bu daha açık sözdizimini kullanmaktır
 

00:02:40.390 --> 00:02:40.400 align:start position:0%
 
 

00:02:40.400 --> 00:02:42.149 align:start position:0%
 
Dizinin <00:02:40.628><c>uzunluğu </c><00:02:40.856><c>üzerinde </c><00:02:41.084><c>Döngü </c><00:02:41.312><c>yaptıkça </c><00:02:41.540><c>artan </c><00:02:41.768><c>I </c><00:02:41.996><c>değeri,</c>

00:02:42.149 --> 00:02:42.159 align:start position:0%
Dizinin uzunluğu üzerinde Döngü yaptıkça artan I değeri,
 

00:02:42.159 --> 00:02:43.830 align:start position:0%
Dizinin uzunluğu üzerinde Döngü yaptıkça artan I değeri,
aynı <00:02:42.353><c>sorunu </c><00:02:42.547><c>çözmemiz </c><00:02:42.741><c>için </c><00:02:42.935><c>bize </c><00:02:43.129><c>dört </c><00:02:43.323><c>yol </c><00:02:43.517><c>sunar,</c>

00:02:43.830 --> 00:02:43.840 align:start position:0%
aynı sorunu çözmemiz için bize dört yol sunar,
 

00:02:43.840 --> 00:02:45.670 align:start position:0%
aynı sorunu çözmemiz için bize dört yol sunar,
ancak <00:02:44.700><c>asıl </c><00:02:45.560><c>soru</c>

00:02:45.670 --> 00:02:45.680 align:start position:0%
ancak asıl soru
 

00:02:45.680 --> 00:02:47.470 align:start position:0%
ancak asıl soru
hangisinin <00:02:46.080><c>en </c><00:02:46.480><c>iyi </c><00:02:46.880><c>performansı </c><00:02:47.280><c>göstereceğidir.</c>

00:02:47.470 --> 00:02:47.480 align:start position:0%
hangisinin en iyi performansı göstereceğidir.
 

00:02:47.480 --> 00:02:49.030 align:start position:0%
hangisinin en iyi performansı göstereceğidir.
Yapacağımız <00:02:48.039><c>ilk </c><00:02:48.598><c>şey,</c>

00:02:49.030 --> 00:02:49.040 align:start position:0%
Yapacağımız ilk şey,
 

00:02:49.040 --> 00:02:51.309 align:start position:0%
Yapacağımız ilk şey,
bu <00:02:49.325><c>durumda </c><00:02:49.610><c>olduğu </c><00:02:49.895><c>gibi </c><00:02:50.180><c>bazı </c><00:02:50.465><c>test </c><00:02:50.750><c>verileri </c><00:02:51.035><c>oluşturmaktır.</c>

00:02:51.309 --> 00:02:51.319 align:start position:0%
bu durumda olduğu gibi bazı test verileri oluşturmaktır.
 

00:02:51.319 --> 00:02:53.630 align:start position:0%
bu durumda olduğu gibi bazı test verileri oluşturmaktır.
içinde <00:02:51.594><c>100.000 </c><00:02:51.869><c>öğe </c><00:02:52.144><c>bulunan </c><00:02:52.419><c>geniş </c><00:02:52.694><c>bir </c><00:02:52.969><c>dizi </c><00:02:53.244><c>oluşturun </c><00:02:53.519><c>ve</c>

00:02:53.630 --> 00:02:53.640 align:start position:0%
içinde 100.000 öğe bulunan geniş bir dizi oluşturun ve
 

00:02:53.640 --> 00:02:55.309 align:start position:0%
içinde 100.000 öğe bulunan geniş bir dizi oluşturun ve
şimdi <00:02:55.040><c>nihayet</c>

00:02:55.309 --> 00:02:55.319 align:start position:0%
şimdi nihayet
 

00:02:55.319 --> 00:02:57.750 align:start position:0%
şimdi nihayet
küresel <00:02:55.570><c>Dino </c><00:02:55.821><c>ad </c><00:02:56.072><c>alanında </c><00:02:56.323><c>Doo </c><00:02:56.574><c>bench </c><00:02:56.825><c>devreye </c><00:02:57.076><c>giriyor,</c>

00:02:57.750 --> 00:02:57.760 align:start position:0%
küresel Dino ad alanında Doo bench devreye giriyor,
 

00:02:57.760 --> 00:02:59.430 align:start position:0%
küresel Dino ad alanında Doo bench devreye giriyor,
bench <00:02:58.064><c>yöntemini </c><00:02:58.368><c>çağırabilir </c><00:02:58.672><c>ve </c><00:02:58.976><c>ardından </c><00:02:59.280><c>ona</c>

00:02:59.430 --> 00:03:00.990 align:start position:0%
bench yöntemini çağırabilir ve ardından ona
 

00:03:00.990 --> 00:03:01.000 align:start position:0%
 
 

00:03:01.000 --> 00:03:02.710 align:start position:0%
 
Benchmark <00:03:01.228><c>için </c><00:03:01.456><c>normal </c><00:03:01.684><c>bir </c><00:03:01.912><c>işlev </c><00:03:02.140><c>sağlayabilir </c><00:03:02.368><c>veya </c><00:03:02.596><c>ona</c>

00:03:02.710 --> 00:03:02.720 align:start position:0%
Benchmark için normal bir işlev sağlayabilir veya ona
 

00:03:02.720 --> 00:03:04.750 align:start position:0%
Benchmark için normal bir işlev sağlayabilir veya ona
bir <00:03:03.119><c>nesne </c><00:03:03.518><c>sağlayabilirsiniz.  </c><00:03:03.917><c>Her </c><00:03:04.316><c>Karşılaştırmaya</c>

00:03:04.750 --> 00:03:04.760 align:start position:0%
bir nesne sağlayabilirsiniz.  Her Karşılaştırmaya
 

00:03:04.760 --> 00:03:07.190 align:start position:0%
bir nesne sağlayabilirsiniz.  Her Karşılaştırmaya
bir <00:03:04.984><c>ad </c><00:03:05.208><c>verin </c><00:03:05.432><c>ve </c><00:03:05.656><c>ardından </c><00:03:05.880><c>FN </c><00:03:06.104><c>özelliği, </c><00:03:06.328><c>çalıştırmak </c><00:03:06.552><c>ve </c><00:03:06.776><c>ölçmek </c><00:03:07.000><c>istediğiniz</c>

00:03:07.190 --> 00:03:07.200 align:start position:0%
bir ad verin ve ardından FN özelliği, çalıştırmak ve ölçmek istediğiniz
 

00:03:07.200 --> 00:03:09.190 align:start position:0%
bir ad verin ve ardından FN özelliği, çalıştırmak ve ölçmek istediğiniz
gerçek <00:03:07.551><c>kod </c><00:03:07.902><c>olan </c><00:03:08.253><c>bir </c><00:03:08.604><c>işlevi </c><00:03:08.955><c>alacaktır.</c>

00:03:09.190 --> 00:03:09.200 align:start position:0%
gerçek kod olan bir işlevi alacaktır.
 

00:03:09.200 --> 00:03:10.949 align:start position:0%
gerçek kod olan bir işlevi alacaktır.
Bu

00:03:10.949 --> 00:03:10.959 align:start position:0%
Bu
 

00:03:10.959 --> 00:03:12.990 align:start position:0%
Bu
dosyada <00:03:12.840><c>doench'i,</c>

00:03:12.990 --> 00:03:13.000 align:start position:0%
dosyada doench'i,
 

00:03:13.000 --> 00:03:15.110 align:start position:0%
dosyada doench'i,
işlevlerimizin <00:03:13.160><c>her </c><00:03:13.320><c>biri </c><00:03:13.480><c>için </c><00:03:13.640><c>bir </c><00:03:13.800><c>kıyaslama </c><00:03:13.960><c>oluşturmak </c><00:03:14.120><c>için </c><00:03:14.280><c>kullanacağız,</c>

00:03:15.110 --> 00:03:15.120 align:start position:0%
işlevlerimizin her biri için bir kıyaslama oluşturmak için kullanacağız,
 

00:03:15.120 --> 00:03:17.070 align:start position:0%
işlevlerimizin her biri için bir kıyaslama oluşturmak için kullanacağız,
ayrıca <00:03:15.579><c>ayarlamaya </c><00:03:16.038><c>da </c><00:03:16.497><c>yardımcı </c><00:03:16.956><c>olur.</c>

00:03:17.070 --> 00:03:17.080 align:start position:0%
ayrıca ayarlamaya da yardımcı olur.
 

00:03:17.080 --> 00:03:18.869 align:start position:0%
ayrıca ayarlamaya da yardımcı olur.
Tipik <00:03:17.262><c>olarak </c><00:03:17.444><c>orijinal </c><00:03:17.626><c>kodunuz </c><00:03:17.808><c>olacak </c><00:03:17.990><c>bir </c><00:03:18.172><c>temel </c><00:03:18.354><c>oluşturacağım</c>

00:03:18.869 --> 00:03:18.879 align:start position:0%
Tipik olarak orijinal kodunuz olacak bir temel oluşturacağım
 

00:03:18.879 --> 00:03:20.309 align:start position:0%
Tipik olarak orijinal kodunuz olacak bir temel oluşturacağım
ve <00:03:19.292><c>bu </c><00:03:19.705><c>durumda </c><00:03:20.118><c>bunu</c>

00:03:20.309 --> 00:03:20.319 align:start position:0%
ve bu durumda bunu
 

00:03:20.319 --> 00:03:22.509 align:start position:0%
ve bu durumda bunu
Doo'daki <00:03:20.659><c>Loop </c><00:03:20.999><c>için </c><00:03:21.339><c>geleneksel </c><00:03:21.679><c>olarak </c><00:03:22.019><c>belirleyeceğim, </c><00:03:22.359><c>bu</c>

00:03:22.509 --> 00:03:22.519 align:start position:0%
Doo'daki Loop için geleneksel olarak belirleyeceğim, bu
 

00:03:22.519 --> 00:03:24.030 align:start position:0%
Doo'daki Loop için geleneksel olarak belirleyeceğim, bu
kıyaslamalar <00:03:23.920><c>aslında</c>

00:03:24.030 --> 00:03:24.040 align:start position:0%
kıyaslamalar aslında
 

00:03:24.040 --> 00:03:25.990 align:start position:0%
kıyaslamalar aslında
çalışma <00:03:24.333><c>zamanı </c><00:03:24.626><c>kodunuzu </c><00:03:24.919><c>etkilemiyor </c><00:03:25.212><c>ancak </c><00:03:25.505><c>daha </c><00:03:25.798><c>çok</c>

00:03:25.990 --> 00:03:26.000 align:start position:0%
çalışma zamanı kodunuzu etkilemiyor ancak daha çok
 

00:03:26.000 --> 00:03:28.270 align:start position:0%
çalışma zamanı kodunuzu etkilemiyor ancak daha çok
test <00:03:26.359><c>kodu </c><00:03:26.718><c>ve </c><00:03:27.077><c>yürütme </c><00:03:27.436><c>yöntemi </c><00:03:27.795><c>gibi </c><00:03:28.154><c>davranıyorlar</c>

00:03:28.270 --> 00:03:28.280 align:start position:0%
test kodu ve yürütme yöntemi gibi davranıyorlar
 

00:03:28.280 --> 00:03:30.509 align:start position:0%
test kodu ve yürütme yöntemi gibi davranıyorlar
Kriterler <00:03:29.079><c>terminali </c><00:03:29.878><c>açmak</c>

00:03:30.509 --> 00:03:30.519 align:start position:0%
Kriterler terminali açmak
 

00:03:30.519 --> 00:03:32.830 align:start position:0%
Kriterler terminali açmak
ve <00:03:30.959><c>doench </c><00:03:31.399><c>komutunu </c><00:03:31.839><c>çalıştırmak </c><00:03:32.279><c>ve </c><00:03:32.719><c>ardından</c>

00:03:32.830 --> 00:03:32.840 align:start position:0%
ve doench komutunu çalıştırmak ve ardından
 

00:03:32.840 --> 00:03:34.470 align:start position:0%
ve doench komutunu çalıştırmak ve ardından
dosya <00:03:33.066><c>adını </c><00:03:33.292><c>çalıştırmaktır, </c><00:03:33.518><c>çalıştırılması </c><00:03:33.744><c>birkaç </c><00:03:33.970><c>saniye </c><00:03:34.196><c>sürecektir,</c>

00:03:34.470 --> 00:03:34.480 align:start position:0%
dosya adını çalıştırmaktır, çalıştırılması birkaç saniye sürecektir,
 

00:03:34.480 --> 00:03:36.589 align:start position:0%
dosya adını çalıştırmaktır, çalıştırılması birkaç saniye sürecektir,
ancak <00:03:36.480><c>bize</c>

00:03:36.589 --> 00:03:36.599 align:start position:0%
ancak bize
 

00:03:36.599 --> 00:03:38.110 align:start position:0%
ancak bize
işlevin <00:03:37.079><c>saniyede </c><00:03:37.559><c>kaç </c><00:03:38.039><c>yinelemeyi</c>

00:03:38.110 --> 00:03:38.120 align:start position:0%
işlevin saniyede kaç yinelemeyi
 

00:03:38.120 --> 00:03:39.910 align:start position:0%
işlevin saniyede kaç yinelemeyi
çalıştırabildiğini

00:03:39.910 --> 00:03:39.920 align:start position:0%
çalıştırabildiğini
 

00:03:39.920 --> 00:03:41.869 align:start position:0%
çalıştırabildiğini
ve <00:03:40.120><c>değerini </c><00:03:40.320><c>gösteren </c><00:03:40.520><c>bu </c><00:03:40.720><c>raporu </c><00:03:40.920><c>verir.  </c><00:03:41.120><c>ortalama </c><00:03:41.320><c>yürütme </c><00:03:41.520><c>süresi </c><00:03:41.720><c>ve</c>

00:03:41.869 --> 00:03:41.879 align:start position:0%
ve değerini gösteren bu raporu verir.  ortalama yürütme süresi ve
 

00:03:41.879 --> 00:03:43.270 align:start position:0%
ve değerini gösteren bu raporu verir.  ortalama yürütme süresi ve
aynı <00:03:42.029><c>zamanda </c><00:03:42.179><c>en </c><00:03:42.329><c>iyi </c><00:03:42.479><c>durum </c><00:03:42.629><c>ve </c><00:03:42.779><c>en </c><00:03:42.929><c>kötü </c><00:03:43.079><c>durum</c>

00:03:43.270 --> 00:03:43.280 align:start position:0%
aynı zamanda en iyi durum ve en kötü durum
 

00:03:43.280 --> 00:03:45.309 align:start position:0%
aynı zamanda en iyi durum ve en kötü durum
performansı, <00:03:43.740><c>ancak </c><00:03:44.200><c>yüksek </c><00:03:44.660><c>düzeyde </c><00:03:45.120><c>en</c>

00:03:45.309 --> 00:03:45.319 align:start position:0%
performansı, ancak yüksek düzeyde en
 

00:03:45.319 --> 00:03:47.270 align:start position:0%
performansı, ancak yüksek düzeyde en
yararlı <00:03:47.120><c>şey</c>

00:03:47.270 --> 00:03:47.280 align:start position:0%
yararlı şey
 

00:03:47.280 --> 00:03:49.390 align:start position:0%
yararlı şey
bize <00:03:47.524><c>hangi </c><00:03:47.768><c>işlevin </c><00:03:48.012><c>en </c><00:03:48.256><c>hızlı </c><00:03:48.500><c>olduğunu </c><00:03:48.744><c>gösteren </c><00:03:48.988><c>özettir </c><00:03:49.232><c>ve</c>

00:03:49.390 --> 00:03:49.400 align:start position:0%
bize hangi işlevin en hızlı olduğunu gösteren özettir ve
 

00:03:49.400 --> 00:03:51.229 align:start position:0%
bize hangi işlevin en hızlı olduğunu gösteren özettir ve
şaşırtıcı <00:03:49.736><c>bir </c><00:03:50.072><c>şekilde </c><00:03:50.408><c>geleneksel </c><00:03:50.744><c>for </c><00:03:51.080><c>Döngüsü</c>

00:03:51.229 --> 00:03:51.239 align:start position:0%
şaşırtıcı bir şekilde geleneksel for Döngüsü
 

00:03:51.239 --> 00:03:53.110 align:start position:0%
şaşırtıcı bir şekilde geleneksel for Döngüsü
diğerlerinden <00:03:51.599><c>önemli </c><00:03:51.959><c>ölçüde </c><00:03:52.319><c>daha </c><00:03:52.679><c>hızlıdır </c><00:03:53.039><c>ve</c>

00:03:53.110 --> 00:03:53.120 align:start position:0%
diğerlerinden önemli ölçüde daha hızlıdır ve
 

00:03:53.120 --> 00:03:55.030 align:start position:0%
diğerlerinden önemli ölçüde daha hızlıdır ve
merak <00:03:53.406><c>ediyor </c><00:03:53.692><c>olabilirsiniz  </c><00:03:53.978><c>neden </c><00:03:54.264><c>bu </c><00:03:54.550><c>kadar </c><00:03:54.836><c>iyi,</c>

00:03:55.030 --> 00:03:55.040 align:start position:0%
merak ediyor olabilirsiniz  neden bu kadar iyi,
 

00:03:55.040 --> 00:03:56.509 align:start position:0%
merak ediyor olabilirsiniz  neden bu kadar iyi,
asıl <00:03:56.280><c>neden</c>

00:03:56.509 --> 00:03:56.519 align:start position:0%
asıl neden
 

00:03:56.519 --> 00:03:58.670 align:start position:0%
asıl neden
soyutlama <00:03:56.899><c>veya </c><00:03:57.279><c>işlev </c><00:03:57.659><c>çağrısının </c><00:03:58.039><c>olmamasıdır</c>

00:03:58.670 --> 00:03:58.680 align:start position:0%
soyutlama veya işlev çağrısının olmamasıdır
 

00:03:58.680 --> 00:04:00.589 align:start position:0%
soyutlama veya işlev çağrısının olmamasıdır
Dörtlü <00:03:59.040><c>döngü </c><00:03:59.400><c>gibi </c><00:03:59.760><c>ek </c><00:04:00.120><c>yük,</c>

00:04:00.589 --> 00:04:00.599 align:start position:0%
Dörtlü döngü gibi ek yük,
 

00:04:00.599 --> 00:04:02.910 align:start position:0%
Dörtlü döngü gibi ek yük,
sözdizimsel <00:04:02.239><c>şekeri</c>

00:04:02.910 --> 00:04:02.920 align:start position:0%
sözdizimsel şekeri
 

00:04:02.920 --> 00:04:05.470 align:start position:0%
sözdizimsel şekeri
ve <00:04:03.104><c>her </c><00:04:03.288><c>biri </c><00:04:03.472><c>için </c><00:04:03.656><c>diziyi </c><00:04:03.840><c>elde </c><00:04:04.024><c>etmek </c><00:04:04.208><c>için </c><00:04:04.392><c>yineleyici </c><00:04:04.576><c>protokolünü </c><00:04:04.760><c>kullanır </c><00:04:04.944><c>ve </c><00:04:05.128><c>geleneksel </c><00:04:05.312><c>for'un</c>

00:04:05.470 --> 00:04:05.480 align:start position:0%
ve her biri için diziyi elde etmek için yineleyici protokolünü kullanır ve geleneksel for'un
 

00:04:05.480 --> 00:04:07.509 align:start position:0%
ve her biri için diziyi elde etmek için yineleyici protokolünü kullanır ve geleneksel for'un
her <00:04:05.754><c>yinelemeden </c><00:04:06.028><c>sonra </c><00:04:06.302><c>bir </c><00:04:06.576><c>işlev </c><00:04:06.850><c>çağrısı </c><00:04:07.124><c>gerektirmesini </c><00:04:07.398><c>azaltır.</c>

00:04:07.509 --> 00:04:07.519 align:start position:0%
her yinelemeden sonra bir işlev çağrısı gerektirmesini azaltır.
 

00:04:07.519 --> 00:04:09.470 align:start position:0%
her yinelemeden sonra bir işlev çağrısı gerektirmesini azaltır.
Döngü <00:04:08.419><c>yoktur </c><00:04:09.319><c>ancak</c>

00:04:09.470 --> 00:04:09.480 align:start position:0%
Döngü yoktur ancak
 

00:04:09.480 --> 00:04:11.630 align:start position:0%
Döngü yoktur ancak
girdi <00:04:10.120><c>verileri </c><00:04:10.760><c>önemlidir, </c><00:04:11.400><c>örneğin</c>

00:04:11.630 --> 00:04:11.640 align:start position:0%
girdi verileri önemlidir, örneğin
 

00:04:11.640 --> 00:04:13.149 align:start position:0%
girdi verileri önemlidir, örneğin
dizideki <00:04:12.259><c>öğelerin </c><00:04:12.878><c>sayısını</c>

00:04:13.149 --> 00:04:13.159 align:start position:0%
dizideki öğelerin sayısını
 

00:04:13.159 --> 00:04:14.949 align:start position:0%
dizideki öğelerin sayısını
bir <00:04:13.979><c>milyona </c><00:04:14.799><c>çıkarırsak,</c>

00:04:14.949 --> 00:04:14.959 align:start position:0%
bir milyona çıkarırsak,
 

00:04:14.959 --> 00:04:16.749 align:start position:0%
bir milyona çıkarırsak,
geleneksel <00:04:15.439><c>for </c><00:04:15.919><c>Döngüsünün </c><00:04:16.399><c>faydalarının</c>

00:04:16.749 --> 00:04:16.759 align:start position:0%
geleneksel for Döngüsünün faydalarının
 

00:04:16.759 --> 00:04:18.310 align:start position:0%
geleneksel for Döngüsünün faydalarının
önemli <00:04:17.047><c>ölçüde </c><00:04:17.335><c>arttığını </c><00:04:17.623><c>görebilirsiniz </c><00:04:17.911><c>ve </c><00:04:18.199><c>şimdi</c>

00:04:18.310 --> 00:04:18.320 align:start position:0%
önemli ölçüde arttığını görebilirsiniz ve şimdi
 

00:04:18.320 --> 00:04:20.390 align:start position:0%
önemli ölçüde arttığını görebilirsiniz ve şimdi
5 <00:04:18.524><c>kat </c><00:04:18.728><c>veya </c><00:04:18.932><c>daha </c><00:04:19.136><c>fazla </c><00:04:19.340><c>performans </c><00:04:19.544><c>artışı </c><00:04:19.748><c>elde </c><00:04:19.952><c>ediyoruz</c>

00:04:20.390 --> 00:04:20.400 align:start position:0%
5 kat veya daha fazla performans artışı elde ediyoruz
 

00:04:20.400 --> 00:04:21.870 align:start position:0%
5 kat veya daha fazla performans artışı elde ediyoruz
ancak <00:04:20.632><c>işin </c><00:04:20.864><c>tuhaf </c><00:04:21.096><c>kısmı </c><00:04:21.328><c>şu </c><00:04:21.560><c>ki,</c>

00:04:21.870 --> 00:04:21.880 align:start position:0%
ancak işin tuhaf kısmı şu ki,
 

00:04:21.880 --> 00:04:24.150 align:start position:0%
ancak işin tuhaf kısmı şu ki,
dizinin <00:04:22.410><c>uzunluğunu </c><00:04:22.940><c>yaklaşık </c><00:04:23.470><c>100'e </c><00:04:24.000><c>indirirsek</c>

00:04:24.150 --> 00:04:24.160 align:start position:0%
dizinin uzunluğunu yaklaşık 100'e indirirsek
 

00:04:24.160 --> 00:04:26.110 align:start position:0%
dizinin uzunluğunu yaklaşık 100'e indirirsek
performans <00:04:24.511><c>neredeyse </c><00:04:24.862><c>eşit </c><00:04:25.213><c>hale </c><00:04:25.564><c>gelir </c><00:04:25.915><c>ve</c>

00:04:26.110 --> 00:04:26.120 align:start position:0%
performans neredeyse eşit hale gelir ve
 

00:04:26.120 --> 00:04:27.590 align:start position:0%
performans neredeyse eşit hale gelir ve
aslında <00:04:26.799><c>dizi </c><00:04:27.478><c>azaltma</c>

00:04:27.590 --> 00:04:27.600 align:start position:0%
aslında dizi azaltma
 

00:04:27.600 --> 00:04:29.390 align:start position:0%
aslında dizi azaltma
geleneksel <00:04:27.866><c>for </c><00:04:28.132><c>Döngüsünü </c><00:04:28.398><c>geride </c><00:04:28.664><c>bırakır, </c><00:04:28.930><c>bu </c><00:04:29.196><c>nedenle</c>

00:04:29.390 --> 00:04:29.400 align:start position:0%
geleneksel for Döngüsünü geride bırakır, bu nedenle
 

00:04:29.400 --> 00:04:30.870 align:start position:0%
geleneksel for Döngüsünü geride bırakır, bu nedenle
buradaki <00:04:30.079><c>ana </c><00:04:30.758><c>yol,</c>

00:04:30.870 --> 00:04:30.880 align:start position:0%
buradaki ana yol,
 

00:04:30.880 --> 00:04:32.510 align:start position:0%
buradaki ana yol,
kullandığınız <00:04:31.128><c>döngü </c><00:04:31.376><c>türünün </c><00:04:31.624><c>gerçekten </c><00:04:31.872><c>önemli </c><00:04:32.120><c>olmadığıdır.</c>

00:04:32.510 --> 00:04:32.520 align:start position:0%
kullandığınız döngü türünün gerçekten önemli olmadığıdır.
 

00:04:32.520 --> 00:04:33.950 align:start position:0%
kullandığınız döngü türünün gerçekten önemli olmadığıdır.
çok <00:04:32.736><c>büyük </c><00:04:32.952><c>diziler </c><00:04:33.168><c>üzerinde </c><00:04:33.384><c>döngü </c><00:04:33.600><c>yapmıyorsanız,</c>

00:04:33.950 --> 00:04:33.960 align:start position:0%
çok büyük diziler üzerinde döngü yapmıyorsanız,
 

00:04:33.960 --> 00:04:35.629 align:start position:0%
çok büyük diziler üzerinde döngü yapmıyorsanız,
bu <00:04:35.479><c>durumda</c>

00:04:35.629 --> 00:04:35.639 align:start position:0%
bu durumda
 

00:04:35.639 --> 00:04:37.070 align:start position:0%
bu durumda
oldukça <00:04:35.804><c>ilginç </c><00:04:35.969><c>bir </c><00:04:36.134><c>geleneksel </c><00:04:36.299><c>for </c><00:04:36.464><c>Döngüsü </c><00:04:36.629><c>kullanmak </c><00:04:36.794><c>isteyeceksiniz,</c>

00:04:37.070 --> 00:04:37.080 align:start position:0%
oldukça ilginç bir geleneksel for Döngüsü kullanmak isteyeceksiniz,
 

00:04:37.080 --> 00:04:38.670 align:start position:0%
oldukça ilginç bir geleneksel for Döngüsü kullanmak isteyeceksiniz,
ancak <00:04:37.820><c>şimdi </c><00:04:38.560><c>size</c>

00:04:38.670 --> 00:04:40.749 align:start position:0%
ancak şimdi size
 

00:04:40.749 --> 00:04:42.790 align:start position:0%
 
 

00:04:42.790 --> 00:04:42.800 align:start position:0%
 
 

00:04:42.800 --> 00:04:45.029 align:start position:0%
 
bir <00:04:42.910><c>dizide </c><00:04:43.020><c>bir </c><00:04:43.130><c>değer </c><00:04:43.240><c>ararken </c><00:04:43.350><c>performans </c><00:04:43.460><c>üzerinde </c><00:04:43.570><c>büyük </c><00:04:43.680><c>bir </c><00:04:43.790><c>etkiye </c><00:04:43.900><c>sahip </c><00:04:44.010><c>olabilecek </c><00:04:44.120><c>bir </c><00:04:44.230><c>optimizasyon </c><00:04:44.340><c>göstermek </c><00:04:44.450><c>istiyorum.  </c><00:04:44.560><c>bu </c><00:04:44.670><c>fonksiyonla</c>

00:04:45.029 --> 00:04:46.790 align:start position:0%
bir dizide bir değer ararken performans üzerinde büyük bir etkiye sahip olabilecek bir optimizasyon göstermek istiyorum.  bu fonksiyonla
 

00:04:46.790 --> 00:04:48.629 align:start position:0%
 
 

00:04:48.629 --> 00:04:48.639 align:start position:0%
 
 

00:04:48.639 --> 00:04:51.469 align:start position:0%
 
ürün <00:04:48.790><c>kimlikleri, </c><00:04:48.941><c>kullanıcı </c><00:04:49.092><c>kimlikleri </c><00:04:49.243><c>ve </c><00:04:49.394><c>e-postaları </c><00:04:49.545><c>içeren </c><00:04:49.696><c>çok </c><00:04:49.847><c>büyük </c><00:04:49.998><c>bir </c><00:04:50.149><c>dizi </c><00:04:50.300><c>oluşturan </c><00:04:50.451><c>bazı </c><00:04:50.602><c>test </c><00:04:50.753><c>verileri </c><00:04:50.904><c>oluşturuyorum </c><00:04:51.055><c>ancak </c><00:04:51.206><c>daha </c><00:04:51.357><c>sonra</c>

00:04:51.469 --> 00:04:53.430 align:start position:0%
ürün kimlikleri, kullanıcı kimlikleri ve e-postaları içeren çok büyük bir dizi oluşturan bazı test verileri oluşturuyorum ancak daha sonra
 

00:04:53.430 --> 00:04:55.189 align:start position:0%
 
 

00:04:55.189 --> 00:04:56.749 align:start position:0%
 
 

00:04:56.749 --> 00:04:56.759 align:start position:0%
 
 

00:04:56.759 --> 00:04:58.629 align:start position:0%
 
vanilyadaki <00:04:56.846><c>büyük </c><00:04:56.933><c>dizide </c><00:04:57.020><c>bulup </c><00:04:57.107><c>bulamayacağımızı </c><00:04:57.194><c>görmek </c><00:04:57.281><c>istediğimiz </c><00:04:57.368><c>bazı </c><00:04:57.455><c>eşleşen </c><00:04:57.542><c>değerleri </c><00:04:57.629><c>içeren </c><00:04:57.716><c>1000 </c><00:04:57.803><c>değerden </c><00:04:57.890><c>oluşan </c><00:04:57.977><c>başka </c><00:04:58.064><c>bir </c><00:04:58.151><c>dizi </c><00:04:58.238><c>oluşturdum</c>

00:04:58.629 --> 00:04:58.639 align:start position:0%
vanilyadaki büyük dizide bulup bulamayacağımızı görmek istediğimiz bazı eşleşen değerleri içeren 1000 değerden oluşan başka bir dizi oluşturdum
 

00:04:58.639 --> 00:05:00.749 align:start position:0%
vanilyadaki büyük dizide bulup bulamayacağımızı görmek istediğimiz bazı eşleşen değerleri içeren 1000 değerden oluşan başka bir dizi oluşturdum
JavaScript'te <00:04:59.139><c>bunu </c><00:04:59.639><c>yapmanın </c><00:05:00.139><c>tipik </c><00:05:00.639><c>yolu,</c>

00:05:00.749 --> 00:05:02.550 align:start position:0%
JavaScript'te bunu yapmanın tipik yolu,
 

00:05:02.550 --> 00:05:04.310 align:start position:0%
 
 

00:05:04.310 --> 00:05:04.320 align:start position:0%
 
 

00:05:04.320 --> 00:05:06.430 align:start position:0%
 
eşleşen <00:05:04.507><c>bir </c><00:05:04.694><c>değer </c><00:05:04.881><c>bulana </c><00:05:05.068><c>kadar </c><00:05:05.255><c>dizi </c><00:05:05.442><c>üzerinde </c><00:05:05.629><c>döngü </c><00:05:05.816><c>yapacak </c><00:05:06.003><c>ve </c><00:05:06.190><c>ardından</c>

00:05:06.430 --> 00:05:06.440 align:start position:0%
eşleşen bir değer bulana kadar dizi üzerinde döngü yapacak ve ardından
 

00:05:06.440 --> 00:05:08.430 align:start position:0%
eşleşen bir değer bulana kadar dizi üzerinde döngü yapacak ve ardından
Büyük <00:05:06.534><c>O'da </c><00:05:06.628><c>bize </c><00:05:06.722><c>n </c><00:05:06.816><c>performansından </c><00:05:06.910><c>o'yu </c><00:05:07.004><c>verecek </c><00:05:07.098><c>doğru </c><00:05:07.192><c>veya </c><00:05:07.286><c>yanlış </c><00:05:07.380><c>bir </c><00:05:07.474><c>Boolean </c><00:05:07.568><c>döndürecek </c><00:05:07.662><c>bir </c><00:05:07.756><c>işlev </c><00:05:07.850><c>olan </c><00:05:07.944><c>dizi </c><00:05:08.038><c>içerme </c><00:05:08.132><c>işlevini </c><00:05:08.226><c>kullanmaktır,</c>

00:05:08.430 --> 00:05:10.950 align:start position:0%
Büyük O'da bize n performansından o'yu verecek doğru veya yanlış bir Boolean döndürecek bir işlev olan dizi içerme işlevini kullanmaktır,
 

00:05:10.950 --> 00:05:10.960 align:start position:0%
 
 

00:05:10.960 --> 00:05:12.430 align:start position:0%
 
ancak <00:05:12.240><c>var</c>

00:05:12.430 --> 00:05:12.440 align:start position:0%
ancak var
 

00:05:12.440 --> 00:05:14.469 align:start position:0%
ancak var
Bu <00:05:12.675><c>sorunu </c><00:05:12.910><c>çözmenin </c><00:05:13.145><c>alternatif </c><00:05:13.380><c>ve </c><00:05:13.615><c>daha </c><00:05:13.850><c>akıllı </c><00:05:14.085><c>bir </c><00:05:14.320><c>yolu,</c>

00:05:14.469 --> 00:05:14.479 align:start position:0%
Bu sorunu çözmenin alternatif ve daha akıllı bir yolu,
 

00:05:14.479 --> 00:05:16.430 align:start position:0%
Bu sorunu çözmenin alternatif ve daha akıllı bir yolu,
orijinal <00:05:14.909><c>diziyi </c><00:05:15.339><c>alıp </c><00:05:15.769><c>bir </c><00:05:16.199><c>küme</c>

00:05:16.430 --> 00:05:16.440 align:start position:0%
orijinal diziyi alıp bir küme
 

00:05:16.440 --> 00:05:18.309 align:start position:0%
orijinal diziyi alıp bir küme
veri <00:05:16.809><c>yapısı </c><00:05:17.178><c>oluşturabiliriz; </c><00:05:17.547><c>bir </c><00:05:17.916><c>küme,</c>

00:05:18.309 --> 00:05:18.319 align:start position:0%
veri yapısı oluşturabiliriz; bir küme,
 

00:05:18.319 --> 00:05:20.270 align:start position:0%
veri yapısı oluşturabiliriz; bir küme,
her <00:05:18.495><c>şeyi </c><00:05:18.671><c>benzersiz </c><00:05:18.847><c>değere </c><00:05:19.023><c>göre </c><00:05:19.199><c>indeksler </c><00:05:19.375><c>ve </c><00:05:19.551><c>has </c><00:05:19.727><c>adı </c><00:05:19.903><c>verilen </c><00:05:20.079><c>ve</c>

00:05:20.270 --> 00:05:22.230 align:start position:0%
her şeyi benzersiz değere göre indeksler ve has adı verilen ve
 

00:05:22.230 --> 00:05:22.240 align:start position:0%
 
 

00:05:22.240 --> 00:05:24.110 align:start position:0%
 
bu <00:05:22.379><c>değerin </c><00:05:22.518><c>kümede </c><00:05:22.657><c>var </c><00:05:22.796><c>olup </c><00:05:22.935><c>olmadığını </c><00:05:23.074><c>bize </c><00:05:23.213><c>söyleyecek </c><00:05:23.352><c>olan </c><00:05:23.491><c>bir </c><00:05:23.630><c>yönteme </c><00:05:23.769><c>sahiptir </c><00:05:23.908><c>oldukça</c>

00:05:24.110 --> 00:05:24.120 align:start position:0%
bu değerin kümede var olup olmadığını bize söyleyecek olan bir yönteme sahiptir oldukça
 

00:05:24.120 --> 00:05:26.189 align:start position:0%
bu değerin kümede var olup olmadığını bize söyleyecek olan bir yönteme sahiptir oldukça
basittir, <00:05:24.760><c>ancak  </c><00:05:25.400><c>şimdi</c>

00:05:26.189 --> 00:05:26.199 align:start position:0%
basittir, ancak  şimdi
 

00:05:26.199 --> 00:05:27.629 align:start position:0%
basittir, ancak  şimdi
bu <00:05:26.447><c>kez </c><00:05:26.695><c>Karşılaştırmamızı </c><00:05:26.943><c>çalıştıralım, </c><00:05:27.191><c>performans </c><00:05:27.439><c>farkı</c>

00:05:27.629 --> 00:05:27.639 align:start position:0%
bu kez Karşılaştırmamızı çalıştıralım, performans farkı
 

00:05:27.639 --> 00:05:29.909 align:start position:0%
bu kez Karşılaştırmamızı çalıştıralım, performans farkı
şaşırtıcı: <00:05:28.679><c>dizi </c><00:05:29.719><c>içeriği</c>

00:05:29.909 --> 00:05:29.919 align:start position:0%
şaşırtıcı: dizi içeriği
 

00:05:29.919 --> 00:05:32.029 align:start position:0%
şaşırtıcı: dizi içeriği
sorunu <00:05:30.303><c>saniyede </c><00:05:30.687><c>yalnızca </c><00:05:31.071><c>4,9 </c><00:05:31.455><c>kez </c><00:05:31.839><c>çözerken,</c>

00:05:32.029 --> 00:05:32.039 align:start position:0%
sorunu saniyede yalnızca 4,9 kez çözerken,
 

00:05:32.039 --> 00:05:34.150 align:start position:0%
sorunu saniyede yalnızca 4,9 kez çözerken,
set <00:05:33.960><c>arama</c>

00:05:34.150 --> 00:05:34.160 align:start position:0%
set arama
 

00:05:34.160 --> 00:05:36.670 align:start position:0%
set arama
aynı <00:05:34.632><c>şeyi </c><00:05:35.104><c>saniyede </c><00:05:35.576><c>4,5 </c><00:05:36.048><c>milyon </c><00:05:36.520><c>kez</c>

00:05:36.670 --> 00:05:36.680 align:start position:0%
aynı şeyi saniyede 4,5 milyon kez
 

00:05:36.680 --> 00:05:38.790 align:start position:0%
aynı şeyi saniyede 4,5 milyon kez
, <00:05:36.973><c>başka </c><00:05:37.266><c>bir </c><00:05:37.559><c>deyişle </c><00:05:37.852><c>bir </c><00:05:38.145><c>milyon </c><00:05:38.438><c>kat</c>

00:05:38.790 --> 00:05:38.800 align:start position:0%
, başka bir deyişle bir milyon kat
 

00:05:38.800 --> 00:05:40.990 align:start position:0%
, başka bir deyişle bir milyon kat
daha <00:05:39.200><c>hızlı </c><00:05:39.600><c>çözebildi.  </c><00:05:40.000><c>bu </c><00:05:40.400><c>çok </c><00:05:40.800><c>dramatik</c>

00:05:40.990 --> 00:05:41.000 align:start position:0%
daha hızlı çözebildi.  bu çok dramatik
 

00:05:41.000 --> 00:05:43.309 align:start position:0%
daha hızlı çözebildi.  bu çok dramatik
çünkü <00:05:41.439><c>set </c><00:05:41.878><c>tek </c><00:05:42.317><c>bir </c><00:05:42.756><c>performansa </c><00:05:43.195><c>sahip,</c>

00:05:43.309 --> 00:05:43.319 align:start position:0%
çünkü set tek bir performansa sahip,
 

00:05:43.319 --> 00:05:45.350 align:start position:0%
çünkü set tek bir performansa sahip,
benzersiz <00:05:43.711><c>değerler </c><00:05:44.103><c>zaten </c><00:05:44.495><c>indekslenmiş, </c><00:05:44.887><c>bu </c><00:05:45.279><c>nedenle</c>

00:05:45.350 --> 00:05:45.360 align:start position:0%
benzersiz değerler zaten indekslenmiş, bu nedenle
 

00:05:45.360 --> 00:05:46.950 align:start position:0%
benzersiz değerler zaten indekslenmiş, bu nedenle
tüm <00:05:45.566><c>dizi </c><00:05:45.772><c>üzerinde </c><00:05:45.978><c>döngü </c><00:05:46.184><c>yapmasına </c><00:05:46.390><c>gerek </c><00:05:46.596><c>yok,</c>

00:05:46.950 --> 00:05:48.909 align:start position:0%
tüm dizi üzerinde döngü yapmasına gerek yok,
 

00:05:48.909 --> 00:05:50.469 align:start position:0%
 
 

00:05:50.469 --> 00:05:50.479 align:start position:0%
 
 

00:05:50.479 --> 00:05:52.430 align:start position:0%
 
eğer <00:05:50.615><c>sadece </c><00:05:50.751><c>dizi </c><00:05:50.887><c>kullanıyorsanız, </c><00:05:51.023><c>şimdi </c><00:05:51.159><c>ilişkisel </c><00:05:51.295><c>bir </c><00:05:51.431><c>veritabanında </c><00:05:51.567><c>indeks </c><00:05:51.703><c>oluşturmakla </c><00:05:51.839><c>aynı </c><00:05:51.975><c>temel </c><00:05:52.111><c>kavramdır</c>

00:05:52.430 --> 00:05:52.440 align:start position:0%
eğer sadece dizi kullanıyorsanız, şimdi ilişkisel bir veritabanında indeks oluşturmakla aynı temel kavramdır
 

00:05:52.440 --> 00:05:54.350 align:start position:0%
eğer sadece dizi kullanıyorsanız, şimdi ilişkisel bir veritabanında indeks oluşturmakla aynı temel kavramdır
az <00:05:52.866><c>sayıda </c><00:05:53.292><c>öğe </c><00:05:53.718><c>içeriyorsa,</c>

00:05:54.350 --> 00:05:54.360 align:start position:0%
az sayıda öğe içeriyorsa,
 

00:05:54.360 --> 00:05:55.950 align:start position:0%
az sayıda öğe içeriyorsa,
muhtemelen <00:05:54.720><c>bir </c><00:05:55.080><c>küme </c><00:05:55.440><c>oluşturmaya </c><00:05:55.800><c>değmez</c>

00:05:55.950 --> 00:05:55.960 align:start position:0%
muhtemelen bir küme oluşturmaya değmez
 

00:05:55.960 --> 00:05:57.629 align:start position:0%
muhtemelen bir küme oluşturmaya değmez
çünkü <00:05:56.177><c>bu </c><00:05:56.394><c>dizini </c><00:05:56.611><c>oluşturmanın </c><00:05:56.828><c>bazı </c><00:05:57.045><c>ek </c><00:05:57.262><c>yükleri </c><00:05:57.479><c>vardır,</c>

00:05:57.629 --> 00:05:57.639 align:start position:0%
çünkü bu dizini oluşturmanın bazı ek yükleri vardır,
 

00:05:57.639 --> 00:05:59.309 align:start position:0%
çünkü bu dizini oluşturmanın bazı ek yükleri vardır,
ancak

00:05:59.309 --> 00:05:59.319 align:start position:0%
ancak
 

00:05:59.319 --> 00:06:01.590 align:start position:0%
ancak
büyük <00:05:59.593><c>bir </c><00:05:59.867><c>veri </c><00:06:00.141><c>kümeniz </c><00:06:00.415><c>varsa </c><00:06:00.689><c>kesinlikle </c><00:06:00.963><c>buna </c><00:06:01.237><c>değer,</c>

00:06:01.590 --> 00:06:01.600 align:start position:0%
büyük bir veri kümeniz varsa kesinlikle buna değer,
 

00:06:01.600 --> 00:06:03.390 align:start position:0%
büyük bir veri kümeniz varsa kesinlikle buna değer,
ancak <00:06:01.806><c>şimdi </c><00:06:02.012><c>dizileri </c><00:06:02.218><c>sıralama </c><00:06:02.424><c>hakkında </c><00:06:02.630><c>konuşalım, </c><00:06:02.836><c>bunu</c>

00:06:03.390 --> 00:06:03.400 align:start position:0%
ancak şimdi dizileri sıralama hakkında konuşalım, bunu
 

00:06:03.400 --> 00:06:04.950 align:start position:0%
ancak şimdi dizileri sıralama hakkında konuşalım, bunu
yapmanın <00:06:03.680><c>birçok </c><00:06:03.960><c>yolu </c><00:06:04.240><c>var  </c><00:06:04.520><c>bu </c><00:06:04.800><c>ve</c>

00:06:04.950 --> 00:06:04.960 align:start position:0%
yapmanın birçok yolu var  bu ve
 

00:06:04.960 --> 00:06:06.469 align:start position:0%
yapmanın birçok yolu var  bu ve
10 <00:06:05.092><c>farklı </c><00:06:05.224><c>sıralama </c><00:06:05.356><c>algoritmasını </c><00:06:05.488><c>görsel </c><00:06:05.620><c>olarak </c><00:06:05.752><c>karşılaştıran </c><00:06:05.884><c>bir </c><00:06:06.016><c>videom </c><00:06:06.148><c>bile </c><00:06:06.280><c>var,</c>

00:06:06.469 --> 00:06:08.270 align:start position:0%
10 farklı sıralama algoritmasını görsel olarak karşılaştıran bir videom bile var,
 

00:06:08.270 --> 00:06:08.280 align:start position:0%
 
 

00:06:08.280 --> 00:06:10.469 align:start position:0%
 
ancak <00:06:08.648><c>JavaScript'in </c><00:06:09.016><c>ayrıca </c><00:06:09.384><c>yerleşik </c><00:06:09.752><c>bir </c><00:06:10.120><c>dizi</c>

00:06:10.469 --> 00:06:10.479 align:start position:0%
ancak JavaScript'in ayrıca yerleşik bir dizi
 

00:06:10.479 --> 00:06:12.070 align:start position:0%
ancak JavaScript'in ayrıca yerleşik bir dizi
sıralama <00:06:10.972><c>yöntemi </c><00:06:11.465><c>var </c><00:06:11.958><c>ve</c>

00:06:12.070 --> 00:06:13.990 align:start position:0%
sıralama yöntemi var ve
 

00:06:13.990 --> 00:06:14.000 align:start position:0%
 
 

00:06:14.000 --> 00:06:16.070 align:start position:0%
 
kabarcık

00:06:16.070 --> 00:06:16.080 align:start position:0%
kabarcık
 

00:06:16.080 --> 00:06:18.150 align:start position:0%
kabarcık
sıralama, <00:06:16.195><c>hızlı </c><00:06:16.310><c>sıralama </c><00:06:16.425><c>ve </c><00:06:16.540><c>birleştirme </c><00:06:16.655><c>sıralama </c><00:06:16.770><c>gibi </c><00:06:16.885><c>üç </c><00:06:17.000><c>farklı </c><00:06:17.115><c>sıralama </c><00:06:17.230><c>algoritması </c><00:06:17.345><c>uygulayarak </c><00:06:17.460><c>bunu </c><00:06:17.575><c>yenebilir </c><00:06:17.690><c>miyim </c><00:06:17.805><c>diye </c><00:06:17.920><c>merak </c><00:06:18.035><c>ediyordum.</c>

00:06:18.150 --> 00:06:18.160 align:start position:0%
sıralama, hızlı sıralama ve birleştirme sıralama gibi üç farklı sıralama algoritması uygulayarak bunu yenebilir miyim diye merak ediyordum.
 

00:06:18.160 --> 00:06:19.550 align:start position:0%
sıralama, hızlı sıralama ve birleştirme sıralama gibi üç farklı sıralama algoritması uygulayarak bunu yenebilir miyim diye merak ediyordum.
Uygulamayı <00:06:18.460><c>ayrıntılı </c><00:06:18.760><c>olarak </c><00:06:19.060><c>ele </c><00:06:19.360><c>almayacağım</c>

00:06:19.550 --> 00:06:19.560 align:start position:0%
Uygulamayı ayrıntılı olarak ele almayacağım
 

00:06:19.560 --> 00:06:21.390 align:start position:0%
Uygulamayı ayrıntılı olarak ele almayacağım
ancak <00:06:20.040><c>kabarcık </c><00:06:20.520><c>sıralama </c><00:06:21.000><c>genellikle</c>

00:06:21.390 --> 00:06:21.400 align:start position:0%
ancak kabarcık sıralama genellikle
 

00:06:21.400 --> 00:06:23.589 align:start position:0%
ancak kabarcık sıralama genellikle
en <00:06:21.726><c>basit </c><00:06:22.052><c>algoritma </c><00:06:22.378><c>olarak </c><00:06:22.704><c>kabul </c><00:06:23.030><c>edilir </c><00:06:23.356><c>ancak</c>

00:06:23.589 --> 00:06:23.599 align:start position:0%
en basit algoritma olarak kabul edilir ancak
 

00:06:23.599 --> 00:06:26.110 align:start position:0%
en basit algoritma olarak kabul edilir ancak
çok

00:06:26.110 --> 00:06:26.120 align:start position:0%
 
 

00:06:26.120 --> 00:06:28.230 align:start position:0%
 
performanslı <00:06:26.328><c>değildir; </c><00:06:26.536><c>hızlı </c><00:06:26.744><c>sıralama </c><00:06:26.952><c>ise </c><00:06:27.160><c>çoğu </c><00:06:27.368><c>kullanım </c><00:06:27.576><c>[Müzik] </c><00:06:27.784><c>durumu </c><00:06:27.992><c>için</c>

00:06:28.230 --> 00:06:28.240 align:start position:0%
performanslı değildir; hızlı sıralama ise çoğu kullanım [Müzik] durumu için
 

00:06:28.240 --> 00:06:30.110 align:start position:0%
performanslı değildir; hızlı sıralama ise çoğu kullanım [Müzik] durumu için
genellikle

00:06:30.110 --> 00:06:30.120 align:start position:0%
genellikle
 

00:06:30.120 --> 00:06:31.430 align:start position:0%
genellikle
en <00:06:30.207><c>hızlı </c><00:06:30.294><c>sıralama </c><00:06:30.381><c>algoritması </c><00:06:30.468><c>olarak </c><00:06:30.555><c>kabul </c><00:06:30.642><c>edilen </c><00:06:30.729><c>bir </c><00:06:30.816><c>böl </c><00:06:30.903><c>ve </c><00:06:30.990><c>yönet </c><00:06:31.077><c>algoritmasıdır</c>

00:06:31.430 --> 00:06:33.890 align:start position:0%
en hızlı sıralama algoritması olarak kabul edilen bir böl ve yönet algoritmasıdır
 

00:06:33.890 --> 00:06:33.900 align:start position:0%
 
 

00:06:33.900 --> 00:06:35.309 align:start position:0%
 


00:06:35.309 --> 00:06:35.319 align:start position:0%
 
 

00:06:35.319 --> 00:06:37.670 align:start position:0%
 
ve <00:06:35.489><c>sonra, </c><00:06:35.659><c>bu </c><00:06:35.829><c>Karşılaştırmada </c><00:06:35.999><c>belirli </c><00:06:36.169><c>veri </c><00:06:36.339><c>yapılarında </c><00:06:36.509><c>gerçekten </c><00:06:36.679><c>iyi </c><00:06:36.849><c>performans </c><00:06:37.019><c>gösterebilen, </c><00:06:37.189><c>aynı </c><00:06:37.359><c>zamanda</c>

00:06:37.670 --> 00:06:37.680 align:start position:0%
ve sonra, bu Karşılaştırmada belirli veri yapılarında gerçekten iyi performans gösterebilen, aynı zamanda
 

00:06:37.680 --> 00:06:39.390 align:start position:0%
ve sonra, bu Karşılaştırmada belirli veri yapılarında gerçekten iyi performans gösterebilen, aynı zamanda
bir <00:06:37.880><c>böl </c><00:06:38.080><c>ve </c><00:06:38.280><c>yönet </c><00:06:38.480><c>algoritması </c><00:06:38.680><c>olan </c><00:06:38.880><c>birleştirme </c><00:06:39.080><c>sıralamasını </c><00:06:39.280><c>kullanın.</c>

00:06:39.390 --> 00:06:42.909 align:start position:0%
bir böl ve yönet algoritması olan birleştirme sıralamasını kullanın.
 

00:06:42.909 --> 00:06:44.950 align:start position:0%
 
 

00:06:44.950 --> 00:06:44.960 align:start position:0%
 
 

00:06:44.960 --> 00:06:47.150 align:start position:0%
 
10.000 <00:06:45.280><c>öğeden </c><00:06:45.600><c>oluşan </c><00:06:45.920><c>bir </c><00:06:46.240><c>diziyi </c><00:06:46.560><c>sıralayacağım,</c>

00:06:47.150 --> 00:06:48.909 align:start position:0%
10.000 öğeden oluşan bir diziyi sıralayacağım,
 

00:06:48.909 --> 00:06:48.919 align:start position:0%
 
 

00:06:48.919 --> 00:06:50.670 align:start position:0%
 
Temel <00:06:49.124><c>olarak </c><00:06:49.329><c>JavaScript </c><00:06:49.534><c>sıralama </c><00:06:49.739><c>işlevini </c><00:06:49.944><c>kullanacağız </c><00:06:50.149><c>ve </c><00:06:50.354><c>çalıştırdığımızda  </c><00:06:50.559><c>Bu</c>

00:06:50.670 --> 00:06:50.680 align:start position:0%
Temel olarak JavaScript sıralama işlevini kullanacağız ve çalıştırdığımızda  Bu
 

00:06:50.680 --> 00:06:52.309 align:start position:0%
Temel olarak JavaScript sıralama işlevini kullanacağız ve çalıştırdığımızda  Bu
Karşılaştırma <00:06:50.866><c>sonucunda </c><00:06:51.052><c>oldukça </c><00:06:51.238><c>ilginç </c><00:06:51.424><c>sonuçlar </c><00:06:51.610><c>elde </c><00:06:51.796><c>ediyoruz</c>

00:06:52.309 --> 00:06:52.319 align:start position:0%
Karşılaştırma sonucunda oldukça ilginç sonuçlar elde ediyoruz
 

00:06:52.319 --> 00:06:54.550 align:start position:0%
Karşılaştırma sonucunda oldukça ilginç sonuçlar elde ediyoruz
kabarcık <00:06:52.819><c>sıralama </c><00:06:53.319><c>açıkça </c><00:06:53.819><c>berbattır </c><00:06:54.319><c>büyük</c>

00:06:54.550 --> 00:06:54.560 align:start position:0%
kabarcık sıralama açıkça berbattır büyük
 

00:06:54.560 --> 00:06:56.230 align:start position:0%
kabarcık sıralama açıkça berbattır büyük
zamanlı <00:06:54.823><c>birleştirme </c><00:06:55.086><c>sıralaması </c><00:06:55.349><c>oldukça </c><00:06:55.612><c>benzer </c><00:06:55.875><c>bir</c>

00:06:56.230 --> 00:06:56.240 align:start position:0%
zamanlı birleştirme sıralaması oldukça benzer bir
 

00:06:56.240 --> 00:06:58.070 align:start position:0%
zamanlı birleştirme sıralaması oldukça benzer bir
performansa <00:06:56.560><c>sahiptir </c><00:06:56.880><c>ancak </c><00:06:57.200><c>hızlı </c><00:06:57.520><c>sıralama </c><00:06:57.840><c>neredeyse</c>

00:06:58.070 --> 00:06:58.080 align:start position:0%
performansa sahiptir ancak hızlı sıralama neredeyse
 

00:06:58.080 --> 00:06:59.790 align:start position:0%
performansa sahiptir ancak hızlı sıralama neredeyse
üç <00:06:58.383><c>kat </c><00:06:58.686><c>daha </c><00:06:58.989><c>hızlıdır </c><00:06:59.292><c>bu </c><00:06:59.595><c>oldukça</c>

00:06:59.790 --> 00:06:59.800 align:start position:0%
üç kat daha hızlıdır bu oldukça
 

00:06:59.800 --> 00:07:01.790 align:start position:0%
üç kat daha hızlıdır bu oldukça
etkileyicidir <00:07:00.176><c>ama </c><00:07:00.552><c>bunun </c><00:07:00.928><c>neden </c><00:07:01.304><c>bu </c><00:07:01.680><c>kısmı</c>

00:07:01.790 --> 00:07:03.230 align:start position:0%
etkileyicidir ama bunun neden bu kısmı
 

00:07:03.230 --> 00:07:03.240 align:start position:0%
 
 

00:07:03.240 --> 00:07:05.230 align:start position:0%
 
işlev <00:07:03.455><c>çağrıları </c><00:07:03.670><c>ve </c><00:07:03.885><c>sıralamanın </c><00:07:04.100><c>yüküyle </c><00:07:04.315><c>ilgilidir?  </c><00:07:04.530><c>ama </c><00:07:04.745><c>aynı </c><00:07:04.960><c>zamanda</c>

00:07:05.230 --> 00:07:06.589 align:start position:0%
işlev çağrıları ve sıralamanın yüküyle ilgilidir?  ama aynı zamanda
 

00:07:06.589 --> 00:07:06.599 align:start position:0%
 
 

00:07:06.599 --> 00:07:08.189 align:start position:0%
 
aslında <00:07:06.799><c>sıralama </c><00:07:06.999><c>yaptığınız </c><00:07:07.199><c>şeye </c><00:07:07.399><c>de </c><00:07:07.599><c>bağlıdır, </c><00:07:07.799><c>bu </c><00:07:07.999><c>durumda</c>

00:07:08.189 --> 00:07:08.199 align:start position:0%
aslında sıralama yaptığınız şeye de bağlıdır, bu durumda
 

00:07:08.199 --> 00:07:09.629 align:start position:0%
aslında sıralama yaptığınız şeye de bağlıdır, bu durumda
hızlı <00:07:08.447><c>sıralama </c><00:07:08.695><c>sayılarla </c><00:07:08.943><c>gerçekten </c><00:07:09.191><c>iyi </c><00:07:09.439><c>bir</c>

00:07:09.629 --> 00:07:09.639 align:start position:0%
hızlı sıralama sayılarla gerçekten iyi bir
 

00:07:09.639 --> 00:07:11.390 align:start position:0%
hızlı sıralama sayılarla gerçekten iyi bir
iş <00:07:10.439><c>yapabilir, </c><00:07:11.239><c>ancak</c>

00:07:11.390 --> 00:07:11.400 align:start position:0%
iş yapabilir, ancak
 

00:07:11.400 --> 00:07:13.150 align:start position:0%
iş yapabilir, ancak
gerçek <00:07:12.879><c>test</c>

00:07:13.150 --> 00:07:13.160 align:start position:0%
gerçek test
 

00:07:13.160 --> 00:07:15.110 align:start position:0%
gerçek test
verilerini <00:07:13.411><c>bir </c><00:07:13.662><c>dizi </c><00:07:13.913><c>diziyle </c><00:07:14.164><c>değiştirirsek </c><00:07:14.415><c>ne </c><00:07:14.666><c>olacağını </c><00:07:14.917><c>görelim.</c>

00:07:15.110 --> 00:07:15.120 align:start position:0%
verilerini bir dizi diziyle değiştirirsek ne olacağını görelim.
 

00:07:15.120 --> 00:07:17.029 align:start position:0%
verilerini bir dizi diziyle değiştirirsek ne olacağını görelim.
aynı <00:07:15.519><c>Karşılaştırma, </c><00:07:15.918><c>ancak </c><00:07:16.317><c>dizelerle</c>

00:07:17.029 --> 00:07:17.039 align:start position:0%
aynı Karşılaştırma, ancak dizelerle
 

00:07:17.039 --> 00:07:19.189 align:start position:0%
aynı Karşılaştırma, ancak dizelerle
hızlı <00:07:17.379><c>sıralama </c><00:07:17.719><c>hala </c><00:07:18.059><c>daha </c><00:07:18.399><c>hızlıdır </c><00:07:18.739><c>ancak </c><00:07:19.079><c>sadece</c>

00:07:19.189 --> 00:07:19.199 align:start position:0%
hızlı sıralama hala daha hızlıdır ancak sadece
 

00:07:19.199 --> 00:07:20.950 align:start position:0%
hızlı sıralama hala daha hızlıdır ancak sadece
birazcık <00:07:19.999><c>sonuç </c><00:07:20.799><c>olarak,</c>

00:07:20.950 --> 00:07:20.960 align:start position:0%
birazcık sonuç olarak,
 

00:07:20.960 --> 00:07:23.070 align:start position:0%
birazcık sonuç olarak,
JavaScript'te <00:07:22.879><c>sıralama</c>

00:07:23.070 --> 00:07:23.080 align:start position:0%
JavaScript'te sıralama
 

00:07:23.080 --> 00:07:24.990 align:start position:0%
JavaScript'te sıralama
çoğu <00:07:23.252><c>kullanım </c><00:07:23.424><c>durumu </c><00:07:23.596><c>için </c><00:07:23.768><c>muhtemelen </c><00:07:23.940><c>yeterince </c><00:07:24.112><c>hızlıdır </c><00:07:24.284><c>ve </c><00:07:24.456><c>programlamanın </c><00:07:24.628><c>dördüncü </c><00:07:24.800><c>kuralı,</c>

00:07:24.990 --> 00:07:25.000 align:start position:0%
çoğu kullanım durumu için muhtemelen yeterince hızlıdır ve programlamanın dördüncü kuralı,
 

00:07:25.000 --> 00:07:27.070 align:start position:0%
çoğu kullanım durumu için muhtemelen yeterince hızlıdır ve programlamanın dördüncü kuralı,
süslü <00:07:26.479><c>algoritmaların</c>

00:07:27.070 --> 00:07:27.080 align:start position:0%
süslü algoritmaların
 

00:07:27.080 --> 00:07:28.909 align:start position:0%
süslü algoritmaların
basit <00:07:27.359><c>algoritmalardan </c><00:07:27.638><c>daha </c><00:07:27.917><c>hatalı </c><00:07:28.196><c>olmasıdır </c><00:07:28.475><c>ve </c><00:07:28.754><c>onlar'</c>

00:07:28.909 --> 00:07:28.919 align:start position:0%
basit algoritmalardan daha hatalı olmasıdır ve onlar'
 

00:07:28.919 --> 00:07:30.430 align:start position:0%
basit algoritmalardan daha hatalı olmasıdır ve onlar'
Basit

00:07:30.430 --> 00:07:30.440 align:start position:0%
Basit
 

00:07:30.440 --> 00:07:32.070 align:start position:0%
Basit
algoritmaların <00:07:30.790><c>yanı </c><00:07:31.140><c>sıra </c><00:07:31.490><c>basit </c><00:07:31.840><c>veri</c>

00:07:32.070 --> 00:07:32.080 align:start position:0%
algoritmaların yanı sıra basit veri
 

00:07:32.080 --> 00:07:33.589 align:start position:0%
algoritmaların yanı sıra basit veri
yapılarını <00:07:32.293><c>uygulamak </c><00:07:32.506><c>çok </c><00:07:32.719><c>daha </c><00:07:32.932><c>zordur, </c><00:07:33.145><c>ancak </c><00:07:33.358><c>gerçekten</c>

00:07:33.589 --> 00:07:33.599 align:start position:0%
yapılarını uygulamak çok daha zordur, ancak gerçekten
 

00:07:33.599 --> 00:07:35.550 align:start position:0%
yapılarını uygulamak çok daha zordur, ancak gerçekten
bir <00:07:33.951><c>sıralama </c><00:07:34.303><c>algoritmasını </c><00:07:34.655><c>optimize </c><00:07:35.007><c>etmek </c><00:07:35.359><c>istiyorsanız</c>

00:07:35.550 --> 00:07:35.560 align:start position:0%
bir sıralama algoritmasını optimize etmek istiyorsanız
 

00:07:35.560 --> 00:07:36.670 align:start position:0%
bir sıralama algoritmasını optimize etmek istiyorsanız
muhtemelen

00:07:36.670 --> 00:07:36.680 align:start position:0%
muhtemelen
 

00:07:36.680 --> 00:07:38.350 align:start position:0%
muhtemelen
JavaScript <00:07:36.983><c>ile </c><00:07:37.286><c>uğraşmamalı </c><00:07:37.589><c>ve </c><00:07:37.892><c>bunun </c><00:07:38.195><c>yerine</c>

00:07:38.350 --> 00:07:38.360 align:start position:0%
JavaScript ile uğraşmamalı ve bunun yerine
 

00:07:38.360 --> 00:07:40.710 align:start position:0%
JavaScript ile uğraşmamalı ve bunun yerine
C <00:07:38.600><c>veya </c><00:07:38.840><c>pas </c><00:07:39.080><c>gibi </c><00:07:39.320><c>bir </c><00:07:39.560><c>sistem </c><00:07:39.800><c>dili </c><00:07:40.040><c>kullanmalısınız. </c><00:07:40.280><c>Doo'nun</c>

00:07:40.710 --> 00:07:40.720 align:start position:0%
C veya pas gibi bir sistem dili kullanmalısınız. Doo'nun
 

00:07:40.720 --> 00:07:42.469 align:start position:0%
C veya pas gibi bir sistem dili kullanmalısınız. Doo'nun
kendisi <00:07:41.253><c>aslında  </c><00:07:41.786><c>Rust'ta </c><00:07:42.319><c>yazılmış,</c>

00:07:42.469 --> 00:07:42.479 align:start position:0%
kendisi aslında  Rust'ta yazılmış,
 

00:07:42.479 --> 00:07:44.189 align:start position:0%
kendisi aslında  Rust'ta yazılmış,
JavaScript <00:07:43.259><c>çalışma </c><00:07:44.039><c>zamanı</c>

00:07:44.189 --> 00:07:44.199 align:start position:0%
JavaScript çalışma zamanı
 

00:07:44.199 --> 00:07:46.869 align:start position:0%
JavaScript çalışma zamanı
Zig, <00:07:44.605><c>nodejs </c><00:07:45.011><c>ve </c><00:07:45.417><c>C++ </c><00:07:45.823><c>ile </c><00:07:46.229><c>yazılmış </c><00:07:46.635><c>oldukça</c>

00:07:46.869 --> 00:07:46.879 align:start position:0%
Zig, nodejs ve C++ ile yazılmış oldukça
 

00:07:46.879 --> 00:07:48.350 align:start position:0%
Zig, nodejs ve C++ ile yazılmış oldukça
ilginç <00:07:47.030><c>ama </c><00:07:47.181><c>bence </c><00:07:47.332><c>tüm </c><00:07:47.483><c>bu </c><00:07:47.634><c>kıyaslamalardan </c><00:07:47.785><c>öğrendiğim </c><00:07:47.936><c>en </c><00:07:48.087><c>önemli </c><00:07:48.238><c>şey,</c>

00:07:48.350 --> 00:07:49.950 align:start position:0%
ilginç ama bence tüm bu kıyaslamalardan öğrendiğim en önemli şey,
 

00:07:49.950 --> 00:07:49.960 align:start position:0%
 
 

00:07:49.960 --> 00:07:51.710 align:start position:0%
 
neredeyse <00:07:50.480><c>tüm </c><00:07:51.000><c>yerleşik </c><00:07:51.520><c>şeylerin</c>

00:07:51.710 --> 00:07:51.720 align:start position:0%
neredeyse tüm yerleşik şeylerin
 

00:07:51.720 --> 00:07:53.670 align:start position:0%
neredeyse tüm yerleşik şeylerin
yeterince <00:07:52.020><c>iyi </c><00:07:52.320><c>olduğu, </c><00:07:52.620><c>kıyaslamanın </c><00:07:52.920><c>eğlenceli </c><00:07:53.220><c>olduğu </c><00:07:53.520><c>ama</c>

00:07:53.670 --> 00:07:53.680 align:start position:0%
yeterince iyi olduğu, kıyaslamanın eğlenceli olduğu ama
 

00:07:53.680 --> 00:07:54.869 align:start position:0%
yeterince iyi olduğu, kıyaslamanın eğlenceli olduğu ama
çok <00:07:53.799><c>daha </c><00:07:53.918><c>önemli </c><00:07:54.037><c>olduğu.  </c><00:07:54.156><c>önce </c><00:07:54.275><c>kodunuzun </c><00:07:54.394><c>çalışmasını </c><00:07:54.513><c>sağlamak </c><00:07:54.632><c>için</c>

00:07:54.869 --> 00:07:54.879 align:start position:0%
çok daha önemli olduğu.  önce kodunuzun çalışmasını sağlamak için
 

00:07:54.879 --> 00:07:56.990 align:start position:0%
çok daha önemli olduğu.  önce kodunuzun çalışmasını sağlamak için
ve <00:07:55.545><c>bu </c><00:07:56.211><c>da </c><00:07:56.877><c>bizi</c>

00:07:56.990 --> 00:07:57.000 align:start position:0%
ve bu da bizi
 

00:07:57.000 --> 00:07:58.629 align:start position:0%
ve bu da bizi
programlamanın <00:07:57.360><c>ilk </c><00:07:57.720><c>kuralına </c><00:07:58.080><c>geri </c><00:07:58.440><c>getirir,</c>

00:07:58.629 --> 00:07:58.639 align:start position:0%
programlamanın ilk kuralına geri getirir,
 

00:07:58.639 --> 00:08:00.189 align:start position:0%
programlamanın ilk kuralına geri getirir,
bir <00:07:58.903><c>programın </c><00:07:59.167><c>zamanını </c><00:07:59.431><c>nerede </c><00:07:59.695><c>harcayacağını </c><00:07:59.959><c>söyleyemezsiniz,</c>

00:08:00.189 --> 00:08:00.199 align:start position:0%
bir programın zamanını nerede harcayacağını söyleyemezsiniz,
 

00:08:00.199 --> 00:08:02.469 align:start position:0%
bir programın zamanını nerede harcayacağını söyleyemezsiniz,
darboğazlar <00:08:00.629><c>şaşırtıcı </c><00:08:01.059><c>yerlerde </c><00:08:01.489><c>meydana </c><00:08:01.919><c>gelir,</c>

00:08:02.469 --> 00:08:02.479 align:start position:0%
darboğazlar şaşırtıcı yerlerde meydana gelir,
 

00:08:02.479 --> 00:08:04.550 align:start position:0%
darboğazlar şaşırtıcı yerlerde meydana gelir,
bu <00:08:03.439><c>nedenle </c><00:08:04.399><c>ikinci</c>

00:08:04.550 --> 00:08:04.560 align:start position:0%
bu nedenle ikinci
 

00:08:04.560 --> 00:08:06.309 align:start position:0%
bu nedenle ikinci
bir <00:08:04.840><c>tahminde </c><00:08:05.120><c>bulunup </c><00:08:05.400><c>hız </c><00:08:05.680><c>kesmeye </c><00:08:05.960><c>çalışmayın</c>

00:08:06.309 --> 00:08:06.319 align:start position:0%
bir tahminde bulunup hız kesmeye çalışmayın
 

00:08:06.319 --> 00:08:07.950 align:start position:0%
bir tahminde bulunup hız kesmeye çalışmayın
Darboğazın <00:08:06.623><c>nerede </c><00:08:06.927><c>olduğunu </c><00:08:07.231><c>kanıtlayana </c><00:08:07.535><c>kadar </c><00:08:07.839><c>ve</c>

00:08:07.950 --> 00:08:07.960 align:start position:0%
Darboğazın nerede olduğunu kanıtlayana kadar ve
 

00:08:07.960 --> 00:08:09.710 align:start position:0%
Darboğazın nerede olduğunu kanıtlayana kadar ve
bunu

00:08:09.710 --> 00:08:09.720 align:start position:0%
bunu
 

00:08:09.720 --> 00:08:11.670 align:start position:0%
bunu
Dino <00:08:09.945><c>bench </c><00:08:10.170><c>gibi </c><00:08:10.395><c>araçlarla </c><00:08:10.620><c>ölçerek </c><00:08:10.845><c>kanıtlamanın </c><00:08:11.070><c>yolu, </c><00:08:11.295><c>gelecek </c><00:08:11.520><c>hafta</c>

00:08:11.670 --> 00:08:11.680 align:start position:0%
Dino bench gibi araçlarla ölçerek kanıtlamanın yolu, gelecek hafta
 

00:08:11.680 --> 00:08:13.189 align:start position:0%
Dino bench gibi araçlarla ölçerek kanıtlamanın yolu, gelecek hafta
çıktığında <00:08:11.900><c>Dino </c><00:08:12.120><c>kursunun </c><00:08:12.340><c>tamamına </c><00:08:12.560><c>göz </c><00:08:12.780><c>atmayı </c><00:08:13.000><c>unutmayın;</c>

00:08:13.189 --> 00:08:13.199 align:start position:0%
çıktığında Dino kursunun tamamına göz atmayı unutmayın;
 

00:08:13.199 --> 00:08:15.149 align:start position:0%
çıktığında Dino kursunun tamamına göz atmayı unutmayın;
burada

00:08:15.149 --> 00:08:15.159 align:start position:0%
burada
 

00:08:15.159 --> 00:08:16.909 align:start position:0%
burada
sonuna <00:08:15.296><c>kadar </c><00:08:15.433><c>gidebilmeniz </c><00:08:15.570><c>için </c><00:08:15.707><c>bir </c><00:08:15.844><c>indirim </c><00:08:15.981><c>kodu </c><00:08:16.118><c>var  </c><00:08:16.255><c>Bu </c><00:08:16.392><c>videoyu</c>

00:08:16.909 --> 00:08:16.919 align:start position:0%
sonuna kadar gidebilmeniz için bir indirim kodu var  Bu videoyu
 

00:08:16.919 --> 00:08:18.469 align:start position:0%
sonuna kadar gidebilmeniz için bir indirim kodu var  Bu videoyu
izlediğiniz <00:08:17.399><c>için </c><00:08:17.879><c>teşekkürler </c><00:08:18.359><c>ve</c>

00:08:18.469 --> 00:08:18.479 align:start position:0%
izlediğiniz için teşekkürler ve
 

00:08:18.479 --> 00:08:21.840 align:start position:0%
izlediğiniz için teşekkürler ve
bir <00:08:18.639><c>sonraki </c><00:08:18.799><c>videoda </c><00:08:18.959><c>görüşürüz</c>

