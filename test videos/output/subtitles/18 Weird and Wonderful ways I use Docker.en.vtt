WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.090
I think I have a Docker addiction.
I use Docker for everything.

00:00:03.120 --> 00:00:06.450
So in this video I'm going to show you
everything. I use Docker for 18 ways.

00:00:06.480 --> 00:00:11.430
Some are awesome, some are kind of
weird. That's so cool. Let's get started.

00:00:11.490 --> 00:00:14.880
And by the way, this is a new
coffee maker I have called the gina.

00:00:14.940 --> 00:00:19.890
It's a smart coffee maker. It has an
app. Let's start brewing Now, by the way,

00:00:19.890 --> 00:00:21.450
this is not sponsored by Gina.

00:00:21.570 --> 00:00:24.060
I'm going to quickly grab a mug while
it's still brewing you right back.

00:00:28.140 --> 00:00:30.870
Oh, I missed the ding. Okay,
it's done. Oh, and by the way,

00:00:30.930 --> 00:00:32.400
this video is sponsored by Docker,

00:00:32.400 --> 00:00:34.710
which is kind of cool because I
would've talked about them for free.

00:00:34.830 --> 00:00:37.980
Don't tell them that. Now, most of the
containers I show you will work anywhere,

00:00:38.040 --> 00:00:41.400
Mac, Linux, windows, and what
I'm using Windows with WSL two.

00:00:41.460 --> 00:00:45.840
Number one is pretty crazy. You can run
a web browser inside a Docker container.

00:00:45.840 --> 00:00:49.590
And I'm not talking about A CLI browser,
a full gooey browser. Check this out.

00:00:49.650 --> 00:00:53.040
Oh, forgot to launch my wsl. I'm
running Ubuntu with Docker install.

00:00:53.070 --> 00:00:56.010
We'll use this Docker run command and
we're pulling a container from Linux

00:00:56.010 --> 00:00:59.220
server.io. You're going to see them again
because they make amazing containers.

00:00:59.225 --> 00:01:02.250
Now one thing I do want to change is
the website we go to when we launch our

00:01:02.250 --> 00:01:06.720
container. Let's change that
academy.network chuck.com.

00:01:06.990 --> 00:01:10.260
Alright. Oh, and one last thing you want
to notice. Look at the port mappings.

00:01:10.320 --> 00:01:13.950
We're doing a one-to-one mapping
between port 3000 and Port 3001.

00:01:14.040 --> 00:01:16.650
Now let's launch it. Ready, set, go.

00:01:16.830 --> 00:01:20.940
Quick little coffee break while it
pulls down that container image and it's

00:01:20.940 --> 00:01:25.200
done. Let's do a docker PS to make sure
it is running somewhere. Yes it is.

00:01:25.200 --> 00:01:26.033
Now this might feel weird.

00:01:26.040 --> 00:01:28.290
We're going to launch our
browser to launch our browser.

00:01:28.320 --> 00:01:30.630
So go ahead and launch any browser you
have and we're going to navigate out to

00:01:30.630 --> 00:01:33.630
local host Port 3000. Look at that.

00:01:33.750 --> 00:01:36.630
This is a browser inside a
container. That's pretty fast.

00:01:36.690 --> 00:01:39.750
Now the reason we have this gooey
access is thanks to Chasm VNC.

00:01:39.780 --> 00:01:43.620
This is an open source tool that Chasm
makes and the company Chasm actually runs

00:01:43.620 --> 00:01:44.910
the network Check cloud browser,

00:01:44.940 --> 00:01:48.540
which will also launch a web browser
inside a container like this,

00:01:48.600 --> 00:01:51.600
except this is run on another server
somewhere else in the world and it's meant

00:01:51.600 --> 00:01:54.060
to be ephemeral. So it's
great for security research,

00:01:54.090 --> 00:01:55.710
but we're essentially
doing the same thing here.

00:01:55.740 --> 00:01:58.140
And because we're running this
web browser inside a container,

00:01:58.380 --> 00:02:01.740
it inherits all the amazing isolation
features of a Docker container,

00:02:01.830 --> 00:02:04.440
even though it feels like you're just
using your web browser. Now I know,

00:02:04.440 --> 00:02:07.890
I know there's a bit of nuance to how
secure this is. Just know in general,

00:02:07.950 --> 00:02:08.730
in most cases,

00:02:08.730 --> 00:02:12.240
a Docker container is separate from
the os it's running on and has inherent

00:02:12.240 --> 00:02:15.390
security. So calm down. I saw you
commenting. I saw you. Anyways,

00:02:15.450 --> 00:02:16.283
let's move on to the next one.

00:02:16.290 --> 00:02:18.750
Obsidian is my favorite notes
application of all time.

00:02:18.780 --> 00:02:19.860
I use it every single day.

00:02:19.920 --> 00:02:23.460
You can run obsidian inside a Docker
container and get gooey access.

00:02:23.520 --> 00:02:26.670
Check this out. We have another
tool from the Linux server.io folks,

00:02:26.700 --> 00:02:29.520
they're kind of amazing and all we have
to change here is our report mappings.

00:02:29.550 --> 00:02:32.340
If you launch that docker
container for Firefox earlier,

00:02:32.370 --> 00:02:35.160
you want to make sure that your host
port is not stepping on the toes of your

00:02:35.160 --> 00:02:37.920
other host ports. By default, it's
programmed to use the same ports.

00:02:37.920 --> 00:02:39.930
Go ahead and change your host
ports to be something else.

00:02:39.960 --> 00:02:44.520
So we might say our port 3003 mapped
to 3000 and our port 3004 mapped to

00:02:44.520 --> 00:02:48.090
3001 inside the container. This is
our port, this is the container port.

00:02:48.180 --> 00:02:50.250
Everything else is good. Hit enter and go.

00:02:50.340 --> 00:02:52.980
Now just know every one of these
containers does have options.

00:02:53.010 --> 00:02:55.830
You can do things like volume mapping
where you can map a folder on your local

00:02:55.830 --> 00:02:57.120
machine to this container,

00:02:57.150 --> 00:03:00.070
making sure your data stays consistent
no matter what your container's doing.

00:03:00.130 --> 00:03:02.290
Okay, it's done. Let's do
a docker ps. There it is.

00:03:02.320 --> 00:03:05.530
And we're going to navigate out
to port 3003 in our browser. Yes,

00:03:05.530 --> 00:03:09.040
we're going to be using our
browser once more. 3003 I said yes,

00:03:09.490 --> 00:03:11.560
and look at that using chasm VNC. Again,

00:03:11.590 --> 00:03:14.860
we'll do a quick start on obsidian
and here we are. Now, full disclosure,

00:03:14.860 --> 00:03:16.990
some of these apps I don't
use every day or ever.

00:03:16.990 --> 00:03:19.720
I just wanted to show you these things
because they're very, very cool. I mean,

00:03:19.720 --> 00:03:23.140
being able to run an application like
this inside a docker container that gives

00:03:23.140 --> 00:03:25.720
you a level of isolation and
security that I'm excited about.

00:03:25.750 --> 00:03:29.080
You would normally get this
type of isolation through
a virtual machine or using

00:03:29.080 --> 00:03:31.030
an OS like cubes, but
that's kind of a pain.

00:03:31.060 --> 00:03:33.610
Docker is much more lightweight
and as you can tell,

00:03:33.610 --> 00:03:35.200
it was much easier to launch this.

00:03:35.230 --> 00:03:37.960
Now sticking with our themes of running
an app inside of Docker container,

00:03:38.230 --> 00:03:41.770
we have Libre office, the open
source version of Microsoft Office.

00:03:41.830 --> 00:03:45.370
This one is actually pretty useful. Again,
thanks to our friends@linuxserver.io.

00:03:45.430 --> 00:03:48.100
I will have their website below if you
want to look at all the documentation and

00:03:48.100 --> 00:03:49.180
options you have for this.

00:03:49.210 --> 00:03:51.640
All we'll have to change now because
we're running two other containers at this

00:03:51.640 --> 00:03:54.970
point is our host port.
We'll do 3005 and 3006.

00:03:55.000 --> 00:03:57.310
I got to make sure I remember which
ones I use and that's all we need.

00:03:57.310 --> 00:03:58.840
Hit enter and it just goes to town.

00:03:58.990 --> 00:04:01.480
I love how simple and amazing
docker containers are.

00:04:01.510 --> 00:04:04.330
This technology never ceases to amaze
me and it's so approachable too.

00:04:04.450 --> 00:04:06.730
If you're learning it or
really learning anything.

00:04:06.790 --> 00:04:10.060
I would honestly start with
Docker containers because
you can do so much. Okay,

00:04:10.060 --> 00:04:13.240
mine is done. Type in docker ps
it's running Same stories before.

00:04:13.240 --> 00:04:17.950
Let's launch our web browser and go out
to port 3005 this time at local host and

00:04:17.950 --> 00:04:18.820
there's Libre office,

00:04:18.820 --> 00:04:21.970
a full Microsoft Office alternative
right here in my browser.

00:04:22.000 --> 00:04:23.710
We'll do a new spreadsheet.

00:04:23.770 --> 00:04:26.380
Now this one I actually might
end up using Folding at home.

00:04:26.410 --> 00:04:28.930
Do you remember that? I used to run
this on my PS three all the time.

00:04:28.960 --> 00:04:30.880
Essentially, when your system
is idle, folding at home,

00:04:30.880 --> 00:04:34.690
while use your system to help aid cancer
research or any other project that's

00:04:34.690 --> 00:04:37.630
helping humanity, we can help
humanity with our docker containers.

00:04:37.690 --> 00:04:39.640
Let's try it out yet
another Docker one command.

00:04:39.760 --> 00:04:41.860
And yet again thanks to our
friends at Lennox Server io.

00:04:41.860 --> 00:04:42.730
A couple of things here.

00:04:42.760 --> 00:04:45.190
You could set your account token
and machine name right now,

00:04:45.190 --> 00:04:47.800
but you don't need to. You can log into
your account here in a moment. And yes,

00:04:47.800 --> 00:04:51.100
folding at home normally does include
signing up for an account. It's free.

00:04:51.160 --> 00:04:53.440
And that's all I have to say about
that. Now there is one more thing here.

00:04:53.530 --> 00:04:57.250
I added some options to enable
my Nvidia GPU. If you have one,

00:04:57.310 --> 00:04:59.410
you might want to run these switches.
If you don't, don't use 'em.

00:04:59.410 --> 00:05:02.890
This will enable GPU acceleration for
your folding at home and you'll also need

00:05:02.890 --> 00:05:04.360
the NVIDIA container runtime.

00:05:04.450 --> 00:05:07.090
It's provided by NVIDIA for free and
I hate that this link is continued.

00:05:07.090 --> 00:05:10.900
On the next line, it's going to draw
squares around both. And actually,

00:05:10.900 --> 00:05:12.400
I don't know if I have this enabled.

00:05:12.460 --> 00:05:14.680
I'm going to install it again just
to make sure you can follow along.

00:05:14.800 --> 00:05:17.500
I think I have done this before
when I installed my AI tools,

00:05:17.560 --> 00:05:20.500
but we'll grab the snippet for
installing via a PT and give it a whirl.

00:05:20.530 --> 00:05:23.590
We'll run our update, then we'll install
the NVIDIA container toolkit. Okay,

00:05:23.590 --> 00:05:27.700
I don't think I had it. Now let's run
our command. Docker, run all that stuff.

00:05:27.850 --> 00:05:31.810
Ready, set, go in. Valid
runtime Nvidia. Okay,

00:05:31.810 --> 00:05:36.250
let's restart my WSL instance. WSL. Shut
down and we'll launch Ubuntu once more.

00:05:36.730 --> 00:05:40.840
Let's try it again. Same response. I'll
check Nvidia. SMI. Okay, that's great.

00:05:40.870 --> 00:05:45.400
I can see my GPU. Oh, I forgot some
commands you've got configure some stuff.

00:05:45.400 --> 00:05:47.410
Come on Chuck. Read the rest
of the documentation. No,

00:05:47.590 --> 00:05:50.590
I want to fool around and break
things. Okay, that seemed to work.

00:05:50.650 --> 00:05:53.230
I couldn't find it because the config
wasn't there. That makes a lot more sense.

00:05:53.320 --> 00:05:56.650
We're starting docker now. And now
let's try it again. Here we go. Okay,

00:05:56.650 --> 00:05:59.270
that's better. Whew. Had me worry
there for a second. Let's do a dock.

00:05:59.330 --> 00:06:02.510
PS folding at home is
running on port 73 96.

00:06:02.570 --> 00:06:05.840
Let's go local host 7 3 9 6. Okay,

00:06:05.960 --> 00:06:09.530
now you can tell I had some
testing before. Let's edit
my machine settings here.

00:06:09.620 --> 00:06:14.525
Enable my GPU. Don't give it all my
CPU. Save it and we'll start now.

00:06:14.525 --> 00:06:18.080
It says GPU zero. I don't know why it's
saying that because it's right here,

00:06:18.080 --> 00:06:20.960
sir. Right now I'm helping,
helping cancer research.

00:06:21.080 --> 00:06:23.840
I had no idea you could use folding
at home with a docker container.

00:06:23.840 --> 00:06:24.673
It's so cool.

00:06:24.680 --> 00:06:28.610
Now you know I love using the CLI and
I don't mind at all using and managing

00:06:28.610 --> 00:06:31.640
docker from the CLI, but sometimes
it's nice to have a gooey,

00:06:31.730 --> 00:06:35.300
a place to see what's going on and
that's why I love using Docker desktop.

00:06:35.390 --> 00:06:38.600
It's available for Mac, Linux, and
Windows, right? Let's go double check.

00:06:38.660 --> 00:06:41.870
Docker desktop. Yeah, you better
believe it is for everything.

00:06:41.960 --> 00:06:45.800
Now this is run by Docker and if you
don't have Docker installed like actual

00:06:45.800 --> 00:06:48.710
Docker, it'll install it for you. But
if you do already have Docker installed,

00:06:48.710 --> 00:06:51.770
like me running in WSL two, it'll
use that. So check this out.

00:06:51.830 --> 00:06:53.540
I already have it installed.
I'm going to run it right now.

00:06:53.570 --> 00:06:55.610
Docker desktop and show you
what I'm talking about. Now,

00:06:55.610 --> 00:06:58.670
currently it doesn't see
any of my containers. Let's
go see if we can fix that.

00:06:58.700 --> 00:07:01.760
It should look at WS L two. It seizes
my images. Let's go to settings,

00:07:01.790 --> 00:07:05.300
resources. We'll go to WSL
integration. Oh, sure enough,

00:07:05.360 --> 00:07:09.680
it's not using my default distro apply
on restart, where my containers go.

00:07:10.160 --> 00:07:13.430
When I did that, it deleted all my
containers. Oh well you live, you learn.

00:07:14.000 --> 00:07:16.340
So don't do that unless you
don't care about your containers,

00:07:16.370 --> 00:07:18.920
which honestly should be fine.
Containers are designed to be ephemeral,

00:07:18.920 --> 00:07:20.990
temporary. Lemme run Firefox again. Okay,

00:07:20.990 --> 00:07:24.410
it's running and it should be
here inside Docker desktop. Sick.

00:07:24.440 --> 00:07:26.750
I want to spin my other guys up
too. They feel lonely. Alright,

00:07:26.750 --> 00:07:27.770
now we got some friends. Alright,

00:07:27.770 --> 00:07:31.550
so Docker desktop is cool because we can
see some things really quickly. CPUs,

00:07:31.550 --> 00:07:33.560
container memory usage, all this stuff.

00:07:33.680 --> 00:07:36.440
And if you're running your docker
containers, like apps like I am,

00:07:36.440 --> 00:07:38.930
that's a nice view. But you might
be thinking, Chuck, hold on.

00:07:39.380 --> 00:07:42.260
I saw a video you did one time with a
tool called Poor Retainer and that thing

00:07:42.260 --> 00:07:42.860
was awesome.

00:07:42.860 --> 00:07:46.010
That was the best way I've ever seen to
manage a Docker container environment.

00:07:46.070 --> 00:07:47.240
You know what? I agree. Hey,

00:07:47.240 --> 00:07:50.660
what's cool is you can actually add
poor retainer inside Docker desktop.

00:07:50.720 --> 00:07:53.030
Check this out. Docker desktop
has what's called extensions.

00:07:53.060 --> 00:07:54.170
They extend the functionality.

00:07:54.170 --> 00:07:58.580
Let's click on it right now and we'll
search for poor retainer. There it is.

00:07:58.610 --> 00:08:00.200
This is easy. Watch this. Click install.

00:08:00.290 --> 00:08:01.640
It's being added right now and that's it.

00:08:02.120 --> 00:08:04.730
So it's running right here and all
I'll have to do is click on that guy,

00:08:04.850 --> 00:08:06.560
go home and here are my environments.

00:08:06.590 --> 00:08:08.210
Let's just jump into our
local environment. Poor,

00:08:08.810 --> 00:08:12.440
I love it right here in Docker desktop.
So as you run more and more containers,

00:08:12.680 --> 00:08:14.840
you are, you're watching this video,
you're going to run more containers,

00:08:15.200 --> 00:08:17.540
you're going to go crazy. You
won't be able to contain yourself.

00:08:17.570 --> 00:08:19.250
Docker desktop is an excellent way,

00:08:19.310 --> 00:08:22.910
especially with poor Taner
to manage what's going on.
CLI is fun. Yeah, come on,

00:08:22.940 --> 00:08:26.210
we're friends there. We agree, but
sometimes you want to see some stuff.

00:08:26.240 --> 00:08:29.540
Get a nice view. Now speaking of seeing
some stuff, this one's kind of weird.

00:08:29.570 --> 00:08:31.100
We're going to take a trip
to a website. Actually,

00:08:31.100 --> 00:08:34.400
we're going to take a trip to the Danger
Zone. This tool called the Danger Zone.

00:08:34.460 --> 00:08:37.490
It is amazing. It'll take
potentially dangerous PDFs,

00:08:37.520 --> 00:08:41.480
office documents or images and convert
them into a safe PDF. Now, Chuck,

00:08:41.480 --> 00:08:44.480
why are you talking about this?
It uses a container to do this.

00:08:44.480 --> 00:08:47.780
So it's sandboxed. This is just an
app you install. Check this out.

00:08:47.840 --> 00:08:50.570
I feel like I said check this out
a lot in this video. I apologize.

00:08:50.600 --> 00:08:52.880
Here's what it does. You give it a
document you don't trust, you don't know.

00:08:52.880 --> 00:08:55.200
It could be an email attachment, it
could be a PDF, it could be anything.

00:08:55.230 --> 00:08:56.280
Instead of a sandbox,

00:08:56.340 --> 00:09:00.270
it'll convert that sucker to A PDF and
then it converts that PDF into raw pixel

00:09:00.270 --> 00:09:04.200
data and then in a separate sandbox
it converts it back to A PDF,

00:09:04.260 --> 00:09:08.130
removing any kind of danger that might
be in that document. That sounds awesome.

00:09:08.370 --> 00:09:11.970
And you can install it for pretty
much any os I think, right? Yeah,

00:09:12.030 --> 00:09:14.610
it's everywhere. And here's
Windows for us. Now, quick thing,

00:09:14.670 --> 00:09:17.040
it does require Docker
desktop to run the sucker.

00:09:17.070 --> 00:09:20.040
It's got to be running at all times.
Thankfully we just talked about that.

00:09:20.040 --> 00:09:23.400
So you're good. Let's install the danger
zone. That's such a cool, fun idea.

00:09:23.460 --> 00:09:27.510
I love this typical installation. Let's
go little coffee break in between.

00:09:27.540 --> 00:09:29.970
By the way, as we're trying to
avoid being hacked right now,

00:09:30.000 --> 00:09:31.920
have you hacked the
YouTube algorithm today?

00:09:32.130 --> 00:09:33.990
Let's make sure you do hit
that like button subscribe,

00:09:33.990 --> 00:09:38.250
notification bell comment. You got
to hack YouTube ethically. Of course,

00:09:38.430 --> 00:09:40.380
I haven't said that in a while.
Okay, it's done. Click finish.

00:09:40.380 --> 00:09:42.780
Let's go ahead and launch a danger
zone. And there it is. Okay,

00:09:42.780 --> 00:09:44.610
so everything looks good, no warnings.

00:09:45.000 --> 00:09:47.400
All we have to do is select these
suspicious document. Let's go find one.

00:09:47.430 --> 00:09:49.200
I don't have anything suspicious,
at least I don't think I do.

00:09:50.010 --> 00:09:52.770
I'll just find something
random. It'll do images, right?

00:09:52.830 --> 00:09:56.100
What are the limitations
here? It'll do, yeah, images.

00:09:56.130 --> 00:09:59.490
I think this is a picture of John
Hammond and it's going to do its thing.

00:09:59.520 --> 00:10:01.500
It's going to convert
it to a safe document.

00:10:01.530 --> 00:10:04.470
What I want to do is show you my running
containers because it's going to do

00:10:04.470 --> 00:10:07.050
some fun stuff. Watch this.
Convert to Safe document. Look,

00:10:07.080 --> 00:10:11.280
it's running containers, boom, sandbox,
boom, sandbox. That's really neat.

00:10:11.460 --> 00:10:14.670
And there's John Hammond with all
the viruses removed. He looks great.

00:10:14.730 --> 00:10:17.910
That's a really fun tool and I love
that it uses docker containers on your

00:10:17.910 --> 00:10:21.180
system. I mean, this is probably
my favorite way to use Docker.

00:10:21.180 --> 00:10:22.170
It's not very flashy,

00:10:22.320 --> 00:10:26.010
but it's super helpful because I
use a lot of tools on a daily basis.

00:10:26.310 --> 00:10:29.580
A bunch of tools that I download from
GitHub that I'll install in my Linux

00:10:29.580 --> 00:10:31.170
environments like WSL two.

00:10:31.320 --> 00:10:34.530
And they'll have just a variety of
different dependencies and sometimes these

00:10:34.530 --> 00:10:38.010
tools will step on each other's toes
and break everything. All that to say,

00:10:38.340 --> 00:10:41.730
I like to install my tools and set them
up inside their own Docker container.

00:10:41.790 --> 00:10:42.690
And if I love the tool,

00:10:42.720 --> 00:10:45.990
I'll use a Docker file to create
an image for that specific tool.

00:10:46.020 --> 00:10:49.530
So essentially any tool I'm going to
use if I love it, for example, fabric,

00:10:49.680 --> 00:10:52.080
I did a video on fabric, see it
up here. It's a great AI tool.

00:10:52.200 --> 00:10:56.550
And they recently changed the architecture
from Python to go. I'm like, okay,

00:10:56.640 --> 00:10:59.850
well I got to go install, go and
change my entire environment.

00:10:59.880 --> 00:11:02.490
Or I could just run it inside a
Docker container in its own separate

00:11:02.490 --> 00:11:02.850
environment.

00:11:02.850 --> 00:11:05.790
That doesn't interfere with anything
else I have going on way better.

00:11:05.850 --> 00:11:09.030
So I define that in a docker file. Here's
what it looks like. And by the way,

00:11:09.030 --> 00:11:12.030
this is kind of a way to build
your own docker containers.

00:11:12.060 --> 00:11:14.400
Not the only way by far,
I think the best way.

00:11:14.460 --> 00:11:15.990
And when you know how to
build your own containers,

00:11:15.990 --> 00:11:17.880
it's like gaining a
superpower. It really is.

00:11:18.030 --> 00:11:21.390
I'm going to throw this code into my
browser base, obsidian inside a container.

00:11:21.510 --> 00:11:24.330
God, that white is blinding
though. Oh my gosh,

00:11:24.420 --> 00:11:27.750
I can't do anything but
dark mode now. Oh my gosh,

00:11:28.950 --> 00:11:32.100
I can see. So here's an example of
a docker file. In full disclosure,

00:11:32.100 --> 00:11:35.070
I use Chad TBT to help me build this.
And that's kind of the world we live in.

00:11:35.070 --> 00:11:38.700
Now, you don't have to start from scratch
on anything. Don't waste time. Use ai,

00:11:38.730 --> 00:11:41.070
let it make you better, but also you
should understand what's going on.

00:11:41.070 --> 00:11:43.140
So use AI to explain it to you. Now here,

00:11:43.200 --> 00:11:47.100
this docker file is defining how to
build a container image. For example,

00:11:47.130 --> 00:11:48.660
it's going to use a Golan image,

00:11:48.750 --> 00:11:51.660
an image from Docker hub that
has Golan already installed.

00:11:51.690 --> 00:11:53.650
And then we're doing something
like setting the working directory,

00:11:53.680 --> 00:11:57.190
adding some packages, cloning the
tools from Daniel Messer's, GitHub,

00:11:57.340 --> 00:12:00.520
running it or installing it and
setting some environment variables.

00:12:00.550 --> 00:12:03.550
Now this is my one unique example. You
don't have to copy this tit for tat.

00:12:03.610 --> 00:12:06.670
I just want to show you kind of what it
looks like to build your own container

00:12:06.910 --> 00:12:10.480
and use it like an app. So here
in my WSL two Linux Ubuntu Land,

00:12:10.570 --> 00:12:14.110
I'll make a directory fabric tool.
Jump in there. Nope, wrong directory.

00:12:15.100 --> 00:12:17.650
There we go. And I'll create
a file called Docker file.

00:12:17.740 --> 00:12:20.290
You'll want to name it just like this.
And I'll paste my config in there.

00:12:20.470 --> 00:12:23.140
Looks good. Ctrl xy. Enter to
save. And then with one command,

00:12:23.140 --> 00:12:26.080
I can create an image from that docker
file and the command will be Docker

00:12:26.290 --> 00:12:29.380
build. We'll do dash t and name
it. I'll call it the fabric.

00:12:29.410 --> 00:12:31.990
And then I'll put a.at the end to tell
it to look here for the docker file.

00:12:32.020 --> 00:12:34.540
Ready, set, go. And it's
building it right now.

00:12:34.690 --> 00:12:36.370
It's actually making a docker image,

00:12:36.400 --> 00:12:39.700
one that you might download from Docker
hub and it's installing and creating

00:12:39.700 --> 00:12:43.930
everything I need right now. And
that's it. If I do a docker image, LS,

00:12:43.990 --> 00:12:47.230
there it is right there. The fabric
created eight seconds ago. Oh yeah.

00:12:47.290 --> 00:12:50.290
Now let's create a container with that
image and I might run a command like this

00:12:50.350 --> 00:12:54.310
Docker run with the dash dash RM command
to remove the container when I'm done

00:12:54.310 --> 00:12:54.550
with it.

00:12:54.550 --> 00:12:57.370
And then it's just running the fabric
command from that container so I can do

00:12:57.370 --> 00:12:59.950
things like, this is so cool. H,

00:13:00.010 --> 00:13:03.430
just to get help for that command for
fabric that's running inside the container

00:13:03.700 --> 00:13:07.750
and giving me the output I can
do, Hey, list my patterns. Cool.

00:13:07.840 --> 00:13:09.670
I can use the pattern.
Lemme say like, Hey,

00:13:09.940 --> 00:13:14.650
tell me a story about
drinking coffee and having

00:13:14.800 --> 00:13:19.600
the best day ever. Make it four sentences
and then I'll paste my command in.

00:13:21.370 --> 00:13:24.010
Woke up early, brewed a perfect
cup of aromatic coffee, sip.

00:13:24.010 --> 00:13:27.520
Slowly watched sunrise, felt peaceful
and invigorated coffee in hand,

00:13:27.550 --> 00:13:29.290
met friends for a laughter filled lunch.

00:13:29.320 --> 00:13:33.610
Evening ended with a satisfying book
and quiet reflection. Now that's a day.

00:13:34.270 --> 00:13:37.120
I'm doing this on Saturday now to make
it where I don't have to run that same

00:13:37.120 --> 00:13:40.330
docker command over and over. I
can add an alias and my Bash rc.

00:13:40.360 --> 00:13:44.500
I'll just call it FB for fabric.
Save that. Refresh my terminal.

00:13:44.560 --> 00:13:48.460
Let's try it out. Let's say telling
me something funny. Pipe it into fb.

00:13:48.820 --> 00:13:51.880
Yes. How cool is that? Now watch this.

00:13:51.910 --> 00:13:54.670
I'm going to have it summarize an article
and we'll see the container pop up.

00:13:54.700 --> 00:13:57.220
I'll grab a random one from a
BLE bean computer or something.

00:13:57.280 --> 00:13:59.110
Now here's one about patch
Tuesday and check this out.

00:13:59.110 --> 00:14:02.050
The container's running over here and
it's summarizing my stuff over here.

00:14:02.680 --> 00:14:06.040
A containerized app just like
that. How sick is that? Oh my gosh,

00:14:06.040 --> 00:14:09.250
I love it so much. Oh, that was
fun. And that's not fake enthusiasm.

00:14:10.030 --> 00:14:14.110
You guys maybe wonder, is Chuck really
like this? Is he faking it for YouTube?

00:14:14.200 --> 00:14:17.410
No. Ask my friends, ask my family.
I'm like this all the time,

00:14:17.740 --> 00:14:20.560
especially with coffee. Now sometimes
when you're building your images,

00:14:20.590 --> 00:14:22.930
which then you'll make your
containers, they could be insecure.

00:14:22.960 --> 00:14:25.570
That's why I love Docker's new
feature here called Docker Scout.

00:14:25.690 --> 00:14:28.030
Now container security is
a big deal. As you can see,

00:14:28.030 --> 00:14:32.410
it's so easy to deploy containers and
pull a variety of images from Docker hub.

00:14:32.470 --> 00:14:35.830
But you know what? Those images
could be out of date and secure.

00:14:35.890 --> 00:14:37.990
They could be placed there
maliciously. You don't know that.

00:14:38.050 --> 00:14:40.390
So if the clicks on Docker scout
here, I can analyze my images.

00:14:40.390 --> 00:14:44.080
Let's analyze the one I just made, the
fabric. Let's see if it's fine. Analyze.

00:14:44.110 --> 00:14:45.490
It's doing it. Alright, we did that one.

00:14:45.490 --> 00:14:50.080
Let's do danger zone and
let's do obsidian. Now I
can go to my images up here,

00:14:50.110 --> 00:14:52.370
jump into any one of them. Like
let's go to danger zone. Oh,

00:14:52.370 --> 00:14:53.420
it's still analyzing right now.

00:14:53.480 --> 00:14:56.270
Let's go back and look at one that's
already done, like the fabric,

00:14:56.360 --> 00:14:58.820
check it out. It analyzed it and
found that there's no vulnerabilities.

00:14:58.910 --> 00:15:01.550
I can see the images used with
this, the packages installed,

00:15:01.580 --> 00:15:03.920
it checks all that stuff to make
sure it's secure. That's amazing.

00:15:03.950 --> 00:15:08.450
You can see all the layers. Let's
go check on danger zone. Whoa,

00:15:08.480 --> 00:15:13.280
danger zone. It's dangerous. Okay, it
found vulnerabilities in these packages.

00:15:13.340 --> 00:15:16.130
There's a lot of, or there's
six. Let's click on that. Yeah,

00:15:16.130 --> 00:15:20.870
and it tells you the cvs right here,
that's pretty high. What's up with this?

00:15:20.930 --> 00:15:23.420
Maybe this is actually
the danger zone. Anyways,

00:15:24.800 --> 00:15:27.770
you stalker scout because
you don't want to get hacked.

00:15:28.010 --> 00:15:31.580
It even tells you there's a newer image
available for images you're using.

00:15:31.640 --> 00:15:34.550
This is cool. Hey, network. Chuck
from the future here. Docker told me,

00:15:34.550 --> 00:15:35.030
Hey Chuck,

00:15:35.030 --> 00:15:37.700
you didn't talk about everything we
wanted you to say about Docker scout.

00:15:37.820 --> 00:15:39.530
I get it. There are some
cool things I didn't mention.

00:15:39.650 --> 00:15:44.240
Can I show you those real quick?
Check this out here in Docker desktop.

00:15:44.270 --> 00:15:45.740
They do have a terminal
now, which is pretty cool.

00:15:45.830 --> 00:15:48.110
I'm going to use Docker
Scout with Docker Scout, CLI,

00:15:48.200 --> 00:15:49.580
and I'm going to use
one of their test repos.

00:15:50.000 --> 00:15:54.260
First of I make sure my organization
is enrolled the network. Chuck,

00:15:54.530 --> 00:15:57.260
this is my GitHub repo done.
And now let's scan some stuff.

00:15:57.260 --> 00:16:00.140
We'll do Docker scout CVEs.

00:16:00.320 --> 00:16:04.310
We'll use the option only package
and we'll say express. Okay, yeah,

00:16:04.370 --> 00:16:07.370
I found some stuff and I love doing
things from CLI. It's just more fun.

00:16:07.460 --> 00:16:09.980
Let's try and fix one of these, like
this right here. It seems pretty easy.

00:16:10.010 --> 00:16:14.720
All we have to do is update a version,
change it from 1, 2, 3 for express.

00:16:15.350 --> 00:16:18.170
Save that sucker rebuild,
and let's analyze again.

00:16:18.260 --> 00:16:20.240
So we fixed the high severity
one, but it's like, Hey,

00:16:20.330 --> 00:16:23.630
update it again because there's
some a medium CVE. Actually,

00:16:23.630 --> 00:16:26.180
it's going to bother me. I'm going to
fix it now. What version did it say?

00:16:26.330 --> 00:16:28.610
It said at least get to four 20.

00:16:28.670 --> 00:16:33.650
We'll push V three and now let's
analyze no vulnerable packages detected.

00:16:33.770 --> 00:16:36.350
Now another thing I did not mention
is you can view all this from a really

00:16:36.350 --> 00:16:39.410
fancy, nice dashboard. Get a
bird's eye view of all your stuff.

00:16:39.440 --> 00:16:42.620
Docker does have a new plan going
into effect, a new pricing model.

00:16:42.620 --> 00:16:45.980
November 15th. Here's all the info here
and it seems to be doing what it says.

00:16:46.040 --> 00:16:48.710
More value at every level.
Anyways, that's docker scout.

00:16:48.860 --> 00:16:50.870
Let's get back to the video. Okay,

00:16:50.870 --> 00:16:54.140
now we're entering the hacking portion
of how I use Docker on a regular basis.

00:16:54.200 --> 00:16:58.250
Setting up a hacking lab with Docker is
the best. Starting with Kelly Lennox,

00:16:58.400 --> 00:17:01.940
check this out. I massive shout
out again to our friends@server.io.

00:17:01.970 --> 00:17:04.490
This container will also
be using chasm V and C.

00:17:04.550 --> 00:17:05.900
So let's go ahead and change our porch.

00:17:05.900 --> 00:17:08.120
Make sure we're not stepping on
any toes. I forget where I was at.

00:17:08.150 --> 00:17:09.170
I'm just going to set a high number.

00:17:09.230 --> 00:17:12.290
I do have this optional config
to map some GPU. Goodness.

00:17:12.440 --> 00:17:15.200
You don't have to do that. And let's
launch this bad boy. Here we go.

00:17:15.200 --> 00:17:18.260
It's going to download the image.
It's kind of heavy. It's Cali Linux.

00:17:18.380 --> 00:17:21.740
It's going to be running inside a gooey
container that we can access from our

00:17:21.740 --> 00:17:23.180
browser, in my humble opinion.

00:17:23.270 --> 00:17:25.880
And many times if you just need
something quick to test out some stuff,

00:17:25.880 --> 00:17:29.600
this is better than a vm. That took
a minute. Let's see if it's running.

00:17:30.050 --> 00:17:33.350
What am I doing? I can check. Docker
desktop. It's running on port 3011.

00:17:33.440 --> 00:17:37.700
Let's go to our browser. Local
host, 3011, check that out.

00:17:37.970 --> 00:17:41.120
Kelly Lennox, right here in our
browser and it just stinking works.

00:17:41.210 --> 00:17:45.620
And it's actually pretty fast. It's
launching Burp like a champ. Oh my gosh.

00:17:45.710 --> 00:17:49.040
Now I said Hacking lab. Where's the
vulnerable machines that we can hack into?

00:17:49.080 --> 00:17:51.510
That can also be a container. Check
this out. Actually, you know what?

00:17:51.510 --> 00:17:53.490
Before we do that as
part of our hacking lab,

00:17:53.520 --> 00:17:55.560
I want to show off one of
my favorite Docker features.

00:17:55.770 --> 00:17:58.920
I made a whole video about it. I love
it so much. And I'm also Network, Chuck.

00:17:59.130 --> 00:18:00.210
It's Docker Networks.

00:18:00.240 --> 00:18:03.900
You can create little isolated networks
to your heart's content and a variety of

00:18:03.900 --> 00:18:05.880
ways. I'm not going to dive
too deep on that. Again,

00:18:05.880 --> 00:18:08.490
I had a whole video covering
every network, I think. Yes.

00:18:08.490 --> 00:18:09.660
So check it out up here.

00:18:09.720 --> 00:18:12.900
But one way I like to do at my Hacking
Labs is setting up an isolated network.

00:18:12.930 --> 00:18:15.480
Because if I'm deploying vulnerable
machines to my system here,

00:18:15.480 --> 00:18:17.340
I want it to be isolated as
much as I can be. Anyway.

00:18:17.370 --> 00:18:19.920
The KL will be Docker Network, create,

00:18:20.040 --> 00:18:23.220
and you can just create a network like
this, like my network. Name it like that.

00:18:23.490 --> 00:18:25.710
Or you can specify some
options like internal,

00:18:25.800 --> 00:18:28.980
where this will be completely isolated.
Now, Docker does not by default.

00:18:28.980 --> 00:18:30.090
So if you didn't specify that,

00:18:30.090 --> 00:18:33.090
it would have internet access and
access to other stuff in your network.

00:18:33.150 --> 00:18:37.890
So I'll call this Hacking Lab. If I do
Docker network ls, there's my networks.

00:18:37.980 --> 00:18:41.070
And real quick, I want to add Callie
Linux to that Hacking Lab Network,

00:18:41.070 --> 00:18:45.300
this Command Docker Network
Connect Hacking Lab,

00:18:46.020 --> 00:18:49.590
Cali Linux. I think that's the name
of the container. Yeah, there we go.

00:18:49.590 --> 00:18:52.950
If I do Docker, inspect Cali Linux.
Let's check out his networks. Yep,

00:18:52.980 --> 00:18:56.400
there he is in Hacking Lab, but he doesn't
have an IP address. Oh yeah, he does.

00:18:56.460 --> 00:18:58.440
There it is right there. It's
not that isolated network.

00:18:58.440 --> 00:19:01.710
I can throw a vulnerable container
inside that network. We'll do Docker,

00:19:01.710 --> 00:19:04.380
run Dash RM to make sure it goes
away when we're done with it.

00:19:04.440 --> 00:19:08.100
Do it for Interactive. We'll
throw it into Hacking Lab Network.

00:19:08.130 --> 00:19:11.700
And the machine image is
vulnerable. Oh, I sp it wrong.

00:19:11.700 --> 00:19:15.570
I know I did Vulnerables. There
we go. Slash web dash d vwa,

00:19:15.600 --> 00:19:18.000
which stands for the damn
vulnerable web application.

00:19:18.000 --> 00:19:21.240
It's a web application that's
intentionally vulnerable. It's messy.

00:19:21.300 --> 00:19:22.560
Let's try this out down,

00:19:22.680 --> 00:19:26.130
because Docker is magic and I think it's
almost done or something went wrong.

00:19:26.520 --> 00:19:28.530
I'm not sure. Is it
running? Yeah, it's running.

00:19:28.560 --> 00:19:31.740
So now this web application's running
on port 80. If I go to port 80 here,

00:19:31.770 --> 00:19:35.070
I shouldn't be able to access it. Yeah,
nothing. But if I go through Cali Linux,

00:19:35.100 --> 00:19:38.040
I should be able to see it just fine.
Wait, I don't know the IP address.

00:19:38.130 --> 00:19:40.650
You know what? That's why it was
sitting there. I didn't do a Damon mode.

00:19:40.650 --> 00:19:42.240
Let's do Docker. Inspect.

00:19:42.300 --> 00:19:44.910
Let's just do a Docker PS to
see what it's running as we'll.

00:19:44.910 --> 00:19:49.050
Inspect that container. What's your
IP address? 1 7 2 19 0 3. Perfect.

00:19:49.200 --> 00:19:51.270
Let's go there and look at
that with a Docker version.

00:19:51.270 --> 00:19:54.000
You do have to create a database.
It does it automagically.

00:19:54.060 --> 00:19:56.310
Now you get a web app, a hacking
web app that's just sitting there.

00:19:56.340 --> 00:19:58.380
I can't access that from
my computer, I don't think.

00:19:58.410 --> 00:20:01.860
Lemme just make sure I'm not lying to
you. Port 80. Yeah, I can't get to it.

00:20:01.860 --> 00:20:05.040
It's only accessible from Cali Lenox
because it's connected to that network.

00:20:05.045 --> 00:20:09.045
And that was just seconds. I set up an
isolated network. I set up Cali Lenox.

00:20:09.240 --> 00:20:11.610
I set up this vulnerable
machine. And by the way,

00:20:11.610 --> 00:20:14.310
there's a ton of vulnerable machines
out there that are containers.

00:20:14.460 --> 00:20:16.290
Just deploy them like
crazy inside Docker. Now,

00:20:16.290 --> 00:20:18.990
just after a Docker networks
is my other favorite feature.

00:20:19.080 --> 00:20:21.750
Docker compose because setting
up a hacking lab is fun,

00:20:21.750 --> 00:20:25.110
but doing it one at a time
like that, boring, lame.

00:20:25.290 --> 00:20:26.730
You need to use Docker Compose.

00:20:26.730 --> 00:20:29.460
Now this is another subject I made a
whole video about, but check this out.

00:20:29.490 --> 00:20:31.740
I'm going to create a new file
here in my obsidian in the web.

00:20:31.920 --> 00:20:35.040
This is what's called a Docker compose
file and all that stuff we just did.

00:20:35.130 --> 00:20:38.280
Setting up a Hacking lab
network, deploying Calli Linux,

00:20:38.310 --> 00:20:42.030
setting up a vulnerable container.
It's all defined and declared here. No.

00:20:42.120 --> 00:20:45.510
What does that mean? Watch this.
This is so cool. I'll take this file.

00:20:45.570 --> 00:20:49.030
I'll make a new directory here in my
two Linux. We'll jump into my lab.

00:20:49.270 --> 00:20:53.260
I'll create a new file and
call it Docker compose yml.

00:20:53.290 --> 00:20:55.750
And I'll paste my config here.
Control x, Y. Enter to save.

00:20:55.780 --> 00:21:00.490
Now watch what happens with one
command. Docker compose up dash D,

00:21:01.030 --> 00:21:04.660
watch this. Boom. It just did everything
for me. Just like that. Look at it.

00:21:04.780 --> 00:21:07.990
It's all here in a little folder
too. My lab. There's Cali Linux,

00:21:08.050 --> 00:21:11.230
there's the vulnerable web machine. Let's
go to it. What's the port again? Oh,

00:21:11.230 --> 00:21:13.390
3011. There's Cali. Good to go.

00:21:13.450 --> 00:21:17.290
Let's go see what our
IP address was for DVWA

00:21:17.350 --> 00:21:21.850
1 7 2 19 0 2. Perfect. But you can't
access that website anywhere else.

00:21:21.910 --> 00:21:25.840
Only in this little Docker network. My
hacking lab all on a web browser. What?

00:21:26.050 --> 00:21:28.780
And Docker Compose. I mean, and
check this out. When I'm done,

00:21:29.140 --> 00:21:32.050
Docker compose down and it's
gone. Not even here. Now,

00:21:32.050 --> 00:21:35.380
another way I love to use Docker is
just trying out new operating systems.

00:21:35.380 --> 00:21:37.570
So for example, Linux
Ubuntu is my favorite.

00:21:37.570 --> 00:21:40.780
But there's other flavors that are
different. They act differently.

00:21:40.810 --> 00:21:42.340
They have different commands and syntaxes,

00:21:42.370 --> 00:21:45.400
and we can easily spin those up right
now. Check it out. So for example,

00:21:45.400 --> 00:21:47.920
let's say Rocky Linux. Just
go find it on Docker hub.

00:21:47.950 --> 00:21:50.680
I think all we got to do is do Docker,
run Rocky Linux. Let's try it out.

00:21:51.070 --> 00:21:54.430
Didn't like that. Lemme try a different
tag. Done. There was Rocky up there.

00:21:54.490 --> 00:21:57.310
Let's connect to 'em. And we're in Rocky
Linux. Now, up until very recently,

00:21:57.310 --> 00:22:01.870
you could actually run Mac OS inside a
Docker container. I think that went away.

00:22:01.900 --> 00:22:03.220
This guy here, sit codes.

00:22:03.220 --> 00:22:07.180
He got a cease and desist or
A-D-M-C-A take down message. Me see?

00:22:07.180 --> 00:22:11.050
I think it's here somewhere. Yeah,
from Apple. They're like, dude,

00:22:11.050 --> 00:22:15.400
stop putting our OS out on the internet
for anyone to use inside a container.

00:22:15.430 --> 00:22:18.280
But I think you can still run
it somehow. Lemme see. Alright,

00:22:18.280 --> 00:22:20.200
I'm going to risk it and
try to run this here.

00:22:20.200 --> 00:22:23.110
Apparently this is an updated
version and if my computer breaks,

00:22:23.110 --> 00:22:25.780
it's your fault. Kind of scared.
Let's roll with it. Oh, that's heavy.

00:22:25.810 --> 00:22:27.970
It's going to take a minute. All
right, so something's happening there.

00:22:27.975 --> 00:22:30.940
Let see if it's running. It's not.
Okay, so let me see what's going on.

00:22:31.030 --> 00:22:32.710
I'm going to ask Chad. GBT. Alright.

00:22:32.770 --> 00:22:34.930
It could be that that port
is being used up. Let's see.

00:22:34.990 --> 00:22:37.930
Let's try a different port and see if
this works. It doesn't like that. Alright,

00:22:37.930 --> 00:22:41.500
we're going to use the host adapter. Is
it doing it? So what we're doing now,

00:22:41.500 --> 00:22:45.640
instead of exposing a port, we're just
going to use the host network adapter.

00:22:45.880 --> 00:22:48.850
Oh, what's happening? Hopefully I'm not
getting hacked right now. Oh my gosh.

00:22:48.850 --> 00:22:52.405
Something's happening
over here in Kemu. What?

00:22:53.920 --> 00:22:56.320
Let's go. Oh, I don't think I have
mouse access. Okay, here we go.

00:22:56.500 --> 00:22:57.880
I already feel like this was a victory.

00:22:58.120 --> 00:23:02.620
That was very much a Mac login screen
or a boot screen. Apple, I love you.

00:23:02.650 --> 00:23:05.650
Don't come after me. I have an
iPhone. See, and an Apple watch.

00:23:05.710 --> 00:23:10.330
I just love you so much. I can't
contain myself. That's so cool.

00:23:11.080 --> 00:23:13.840
Oh, alright. I'm in recovery right now.

00:23:14.920 --> 00:23:18.340
I don't think I want to try and
reinstall, but can I just go to Safari?

00:23:18.370 --> 00:23:22.000
That'd be kind of funny.
Yeah. Okay. It's having a fit.

00:23:22.030 --> 00:23:25.660
It probably hates this. Okay, I
want to try and reinstall Max,

00:23:25.960 --> 00:23:29.020
just because I'm so curious what's
going to happen. This is nuts.

00:23:29.080 --> 00:23:30.370
I read a story about this.

00:23:30.370 --> 00:23:33.790
I didn't know it actually gave you a
gooey and it's using X 11 forwarding.

00:23:34.150 --> 00:23:38.110
Just seeing the Apple logo is just
crazy to me. Alright, let's reinstall.

00:23:38.230 --> 00:23:42.700
I've got the spinning wheel, the beach
ball. Yeah, I agree. Yep. Okay. Yeah,

00:23:42.700 --> 00:23:45.950
that. Oh, it's locked. Okay,
so we hit the end of our road.

00:23:45.950 --> 00:23:47.540
I'm not going to try and do anything else.

00:23:47.540 --> 00:23:50.270
I'm sure we could play with it a
bit more, but that was pretty fun.

00:23:50.300 --> 00:23:54.260
Let's end this party and delete all
these things. Actually, I'm curious,

00:23:54.290 --> 00:23:57.110
what does Docker scout have
to say about this? Okay,

00:23:57.110 --> 00:24:00.410
well it's analyzing that you could
actually run a raspberry pie and a docker

00:24:00.410 --> 00:24:04.400
container. Here's the repo right here.
Oh, I love the logo. Yes. Alright.

00:24:04.430 --> 00:24:07.010
I'm just going to run it.
Run this. See what happens.

00:24:07.040 --> 00:24:10.430
What's the worst that can happen? Okay.
It said no file system detected, but no,

00:24:10.430 --> 00:24:14.270
it's pulling out the Raspbian buster
light image right now. Okay. Did it do it?

00:24:14.330 --> 00:24:18.045
It's doing something. Raspbian buster.
Oh my gosh. This is Raspberry Pi.

00:24:18.410 --> 00:24:21.980
I know my pie. I don't like seeing
failed. Oh, come on. Please work.

00:24:22.040 --> 00:24:26.120
Please work. It has an
IV address. We're here.

00:24:27.830 --> 00:24:32.780
What's the login? Is it pi? What's the
login? Oh, is it? I don't remember.

00:24:32.900 --> 00:24:37.340
Oh, it's Pi Raspberry. Pi Raspberry
Pi Raspberry Raspberry Pi.

00:24:37.460 --> 00:24:41.840
Running inside a container.
Sorry, I'm a little excited.

00:24:42.920 --> 00:24:47.150
Oh, sure enough. We're running Raspbian
in a container. Crazy. Oh, okay. Look,

00:24:47.150 --> 00:24:51.380
we got our stuff about this guy.
Vulnerabilities galore. Yeah,

00:24:51.680 --> 00:24:55.250
he's out of here. Yeah, out of
here buddy. See a Sonoma by Sonoma.

00:24:55.340 --> 00:24:58.130
I can't believe I'm using a raspberry
pie in a container right now.

00:24:58.160 --> 00:24:58.993
That's so cool.

00:24:59.000 --> 00:25:01.880
The last one I want to show you is a
cool thing called it Tools that I found.

00:25:01.940 --> 00:25:04.820
And when I say I found it, I actually
lost it. I have to go find it real quick.

00:25:04.820 --> 00:25:09.440
Where did it go? Oh, I think I found it.
Yeah. Here it is. I think this is it.

00:25:09.500 --> 00:25:12.680
Alright, lemme get out of here.
No, how do I get out? All right,

00:25:12.680 --> 00:25:16.280
I'm just going to go stop the container.
Okay, cool. Let's try this. 80, 80.

00:25:16.280 --> 00:25:19.280
I think this opened for me. Let's go
see what happened. Local host 80 80.

00:25:19.790 --> 00:25:23.810
Look at all this. So this is a bunch
of tools that are for IT people.

00:25:23.870 --> 00:25:28.850
So for example, you've got B crypt, HVAC
generators, date time converters, RSA,

00:25:28.850 --> 00:25:32.840
key Pair, generators. I mean, this is
actually pretty cool. Token generator,

00:25:32.870 --> 00:25:36.620
refresh. Refresh. This is nifty
Cron tab generator. I mean,

00:25:37.010 --> 00:25:40.730
we got chat GPT now, but this is pretty
cool though. IP address converter.

00:25:40.790 --> 00:25:44.480
There are so many things emoji
picker. That's actually cool.

00:25:44.540 --> 00:25:48.920
We could spend all day here. Text diff.
That's neat. Outlook, safe link decoder.

00:25:48.950 --> 00:25:52.730
Oh, that's actually handy. QR code
generator. Docker, run to docker,

00:25:52.730 --> 00:25:55.490
compose converter. Could
that be any more? Perfect.

00:25:55.520 --> 00:25:58.280
Why did I just quote Chandler? We've
been watching a lot of friends lately,

00:25:58.430 --> 00:26:00.410
so I just realized this
video is probably very long.

00:26:01.160 --> 00:26:04.070
Lemme know if you like this style. I made
it more conversational. Thanks again,

00:26:04.070 --> 00:26:06.410
a docker for sponsoring this
video and making it possible.

00:26:06.920 --> 00:26:09.860
And I would've made the video anyway
if they hadn't have sponsored this.

00:26:09.860 --> 00:26:11.810
I just love Dockers so
much. That's all I got.

00:26:11.900 --> 00:26:16.400
I'll catch you guys in the next video.
Yeah, and I'm not sure if that was 18.

00:26:16.580 --> 00:26:17.300
I lost count.

