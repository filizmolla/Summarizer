## Five Rules of Programming

- Do not talk about programming
- Measure, don't tune for Speed until you've measured and even then don't unless one part of the code overwhelms the rest.
- Premature optimization is the root of all evil.
- Measure twice cut once.

## JavaScript Performance

### Looping Over Arrays

- Use traditional for Loop for massive arrays.
- Use array reduce for cleaner code.

### Searching for Values

- Use set lookup for O(1) performance when searching for matching values in large arrays.
- Array includes has O(n) performance.

### Sorting Arrays

- JavaScript sort method is generally fast enough for most use cases.
- Quicksort is faster than the JavaScript sort method for sorting numbers.
- Merge sort performs well on certain data structures.

## Actionable Advice

- Benchmark your code to identify performance bottlenecks.
- Use Dino bench to easily Benchmark JavaScript code.
- Measure before optimizing to avoid wasting time.
- Use simple algorithms and data structures for improved performance.
- Consider using a systems language like C or rust for optimal sorting performance.

## References and Examples

- [Anton Putra's video comparing performance of node, Dino, and Bun runtimes](https://www.youtube.com/watch?v=9y5MsY7p84Y)
- [JavaScript Benchmarking using Dino Bench](https://www.youtube.com/watch?v=HzMi8o_Q_v8)
- [Full Dino course](https://www.robinwieruch.de/complete-javascript-course-dino-full-stack)
- [Dino runtime](https://d.io/)

## Other Insights

- Array forEach has similar performance to array reduce.
- Performance bottlenecks are often unexpected.
- Benchmarking tools like Dino bench make it easy to measure performance.